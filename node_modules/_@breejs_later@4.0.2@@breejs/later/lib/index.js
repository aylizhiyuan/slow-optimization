"use strict";

var pkg = require('../package.json');

var later = {
  version: pkg.version
};
later.array = {};

later.array.sort = function (array, zeroIsLast) {
  array.sort(function (a, b) {
    return Number(a) - Number(b);
  });

  if (zeroIsLast && array[0] === 0) {
    array.push(array.shift());
  }
};

later.array.next = function (value, values, extent) {
  var cur;
  var zeroIsLargest = extent[0] !== 0;
  var nextIdx = 0;

  for (var i = values.length - 1; i > -1; --i) {
    cur = values[i];

    if (cur === value) {
      return cur;
    }

    if (cur > value || cur === 0 && zeroIsLargest && extent[1] > value) {
      nextIdx = i;
      continue;
    }

    break;
  }

  return values[nextIdx];
};

later.array.nextInvalid = function (value, values, extent) {
  var min = extent[0];
  var max = extent[1];
  var length = values.length;
  var zeroValue = values[length - 1] === 0 && min !== 0 ? max : 0;
  var next = value;
  var i = values.indexOf(value);
  var start = next;

  while (next === (values[i] || zeroValue)) {
    next++;

    if (next > max) {
      next = min;
    }

    i++;

    if (i === length) {
      i = 0;
    }

    if (next === start) {
      return undefined;
    }
  }

  return next;
};

later.array.prev = function (value, values, extent) {
  var cur;
  var length = values.length;
  var zeroIsLargest = extent[0] !== 0;
  var previousIdx = length - 1;

  for (var i = 0; i < length; i++) {
    cur = values[i];

    if (cur === value) {
      return cur;
    }

    if (cur < value || cur === 0 && zeroIsLargest && extent[1] < value) {
      previousIdx = i;
      continue;
    }

    break;
  }

  return values[previousIdx];
};

later.array.prevInvalid = function (value, values, extent) {
  var min = extent[0];
  var max = extent[1];
  var length = values.length;
  var zeroValue = values[length - 1] === 0 && min !== 0 ? max : 0;
  var next = value;
  var i = values.indexOf(value);
  var start = next;

  while (next === (values[i] || zeroValue)) {
    next--;

    if (next < min) {
      next = max;
    }

    i--;

    if (i === -1) {
      i = length - 1;
    }

    if (next === start) {
      return undefined;
    }
  }

  return next;
};

later.day = later.D = {
  name: 'day',
  range: 86400,
  val: function val(d) {
    return d.D || (d.D = later.date.getDate.call(d));
  },
  isValid: function isValid(d, value) {
    return later.D.val(d) === (value || later.D.extent(d)[1]);
  },
  extent: function extent(d) {
    if (d.DExtent) return d.DExtent;
    var month = later.M.val(d);
    var max = later.DAYS_IN_MONTH[month - 1];

    if (month === 2 && later.dy.extent(d)[1] === 366) {
      max += 1;
    }

    return d.DExtent = [1, max];
  },
  start: function start(d) {
    return d.DStart || (d.DStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d)));
  },
  end: function end(d) {
    return d.DEnd || (d.DEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d)));
  },
  next: function next(d, value) {
    value = value > later.D.extent(d)[1] ? 1 : value;
    var month = later.date.nextRollover(d, value, later.D, later.M);
    var DMax = later.D.extent(month)[1];
    value = value > DMax ? 1 : value || DMax;
    return later.date.next(later.Y.val(month), later.M.val(month), value);
  },
  prev: function prev(d, value) {
    var month = later.date.prevRollover(d, value, later.D, later.M);
    var DMax = later.D.extent(month)[1];
    return later.date.prev(later.Y.val(month), later.M.val(month), value > DMax ? DMax : value || DMax);
  }
};
later.dayOfWeekCount = later.dc = {
  name: 'day of week count',
  range: 604800,
  val: function val(d) {
    return d.dc || (d.dc = Math.floor((later.D.val(d) - 1) / 7) + 1);
  },
  isValid: function isValid(d, value) {
    return later.dc.val(d) === value || value === 0 && later.D.val(d) > later.D.extent(d)[1] - 7;
  },
  extent: function extent(d) {
    return d.dcExtent || (d.dcExtent = [1, Math.ceil(later.D.extent(d)[1] / 7)]);
  },
  start: function start(d) {
    return d.dcStart || (d.dcStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(1, (later.dc.val(d) - 1) * 7 + 1 || 1)));
  },
  end: function end(d) {
    return d.dcEnd || (d.dcEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.dc.val(d) * 7, later.D.extent(d)[1])));
  },
  next: function next(d, value) {
    value = value > later.dc.extent(d)[1] ? 1 : value;
    var month = later.date.nextRollover(d, value, later.dc, later.M);
    var dcMax = later.dc.extent(month)[1];
    value = value > dcMax ? 1 : value;
    var next = later.date.next(later.Y.val(month), later.M.val(month), value === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (value - 1));

    if (next.getTime() <= d.getTime()) {
      month = later.M.next(d, later.M.val(d) + 1);
      return later.date.next(later.Y.val(month), later.M.val(month), value === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (value - 1));
    }

    return next;
  },
  prev: function prev(d, value) {
    var month = later.date.prevRollover(d, value, later.dc, later.M);
    var dcMax = later.dc.extent(month)[1];
    value = value > dcMax ? dcMax : value || dcMax;
    return later.dc.end(later.date.prev(later.Y.val(month), later.M.val(month), 1 + 7 * (value - 1)));
  }
};
later.dayOfWeek = later.dw = later.d = {
  name: 'day of week',
  range: 86400,
  val: function val(d) {
    return d.dw || (d.dw = later.date.getDay.call(d) + 1);
  },
  isValid: function isValid(d, value) {
    return later.dw.val(d) === (value || 7);
  },
  extent: function extent() {
    return [1, 7];
  },
  start: function start(d) {
    return later.D.start(d);
  },
  end: function end(d) {
    return later.D.end(d);
  },
  next: function next(d, value) {
    value = value > 7 ? 1 : value || 7;
    return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (value - later.dw.val(d)) + (value <= later.dw.val(d) ? 7 : 0));
  },
  prev: function prev(d, value) {
    value = value > 7 ? 7 : value || 7;
    return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (value - later.dw.val(d)) + (value >= later.dw.val(d) ? -7 : 0));
  }
};
later.dayOfYear = later.dy = {
  name: 'day of year',
  range: 86400,
  val: function val(d) {
    return d.dy || (d.dy = Math.ceil(1 + (later.D.start(d).getTime() - later.Y.start(d).getTime()) / later.DAY));
  },
  isValid: function isValid(d, value) {
    return later.dy.val(d) === (value || later.dy.extent(d)[1]);
  },
  extent: function extent(d) {
    var year = later.Y.val(d);
    return d.dyExtent || (d.dyExtent = [1, year % 4 ? 365 : 366]);
  },
  start: function start(d) {
    return later.D.start(d);
  },
  end: function end(d) {
    return later.D.end(d);
  },
  next: function next(d, value) {
    value = value > later.dy.extent(d)[1] ? 1 : value;
    var year = later.date.nextRollover(d, value, later.dy, later.Y);
    var dyMax = later.dy.extent(year)[1];
    value = value > dyMax ? 1 : value || dyMax;
    return later.date.next(later.Y.val(year), later.M.val(year), value);
  },
  prev: function prev(d, value) {
    var year = later.date.prevRollover(d, value, later.dy, later.Y);
    var dyMax = later.dy.extent(year)[1];
    value = value > dyMax ? dyMax : value || dyMax;
    return later.date.prev(later.Y.val(year), later.M.val(year), value);
  }
};
later.hour = later.h = {
  name: 'hour',
  range: 3600,
  val: function val(d) {
    return d.h || (d.h = later.date.getHour.call(d));
  },
  isValid: function isValid(d, value) {
    return later.h.val(d) === value;
  },
  extent: function extent() {
    return [0, 23];
  },
  start: function start(d) {
    return d.hStart || (d.hStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));
  },
  end: function end(d) {
    return d.hEnd || (d.hEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));
  },
  next: function next(d, value) {
    value = value > 23 ? 0 : value;
    var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (value <= later.h.val(d) ? 1 : 0), value);

    if (!later.date.isUTC && next.getTime() <= d.getTime()) {
      next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), value + 1);
    }

    return next;
  },
  prev: function prev(d, value) {
    value = value > 23 ? 23 : value;
    return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (value >= later.h.val(d) ? -1 : 0), value);
  }
};
later.minute = later.m = {
  name: 'minute',
  range: 60,
  val: function val(d) {
    return d.m || (d.m = later.date.getMin.call(d));
  },
  isValid: function isValid(d, value) {
    return later.m.val(d) === value;
  },
  extent: function extent(d) {
    return [0, 59];
  },
  start: function start(d) {
    return d.mStart || (d.mStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));
  },
  end: function end(d) {
    return d.mEnd || (d.mEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));
  },
  next: function next(d, value) {
    var m = later.m.val(d);
    var s = later.s.val(d);
    var inc = value > 59 ? 60 - m : value <= m ? 60 - m + value : value - m;
    var next = new Date(d.getTime() + inc * later.MIN - s * later.SEC);

    if (!later.date.isUTC && next.getTime() <= d.getTime()) {
      next = new Date(d.getTime() + (inc + 120) * later.MIN - s * later.SEC);
    }

    return next;
  },
  prev: function prev(d, value) {
    value = value > 59 ? 59 : value;
    return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d) + (value >= later.m.val(d) ? -1 : 0), value);
  }
};
later.month = later.M = {
  name: 'month',
  range: 2629740,
  val: function val(d) {
    return d.M || (d.M = later.date.getMonth.call(d) + 1);
  },
  isValid: function isValid(d, value) {
    return later.M.val(d) === (value || 12);
  },
  extent: function extent() {
    return [1, 12];
  },
  start: function start(d) {
    return d.MStart || (d.MStart = later.date.next(later.Y.val(d), later.M.val(d)));
  },
  end: function end(d) {
    return d.MEnd || (d.MEnd = later.date.prev(later.Y.val(d), later.M.val(d)));
  },
  next: function next(d, value) {
    value = value > 12 ? 1 : value || 12;
    return later.date.next(later.Y.val(d) + (value > later.M.val(d) ? 0 : 1), value);
  },
  prev: function prev(d, value) {
    value = value > 12 ? 12 : value || 12;
    return later.date.prev(later.Y.val(d) - (value >= later.M.val(d) ? 1 : 0), value);
  }
};
later.second = later.s = {
  name: 'second',
  range: 1,
  val: function val(d) {
    return d.s || (d.s = later.date.getSec.call(d));
  },
  isValid: function isValid(d, value) {
    return later.s.val(d) === value;
  },
  extent: function extent() {
    return [0, 59];
  },
  start: function start(d) {
    return d;
  },
  end: function end(d) {
    return d;
  },
  next: function next(d, value) {
    var s = later.s.val(d);
    var inc = value > 59 ? 60 - s : value <= s ? 60 - s + value : value - s;
    var next = new Date(d.getTime() + inc * later.SEC);

    if (!later.date.isUTC && next.getTime() <= d.getTime()) {
      next = new Date(d.getTime() + (inc + 7200) * later.SEC);
    }

    return next;
  },
  prev: function prev(d, value, cache) {
    value = value > 59 ? 59 : value;
    return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d) + (value >= later.s.val(d) ? -1 : 0), value);
  }
};
later.time = later.t = {
  name: 'time',
  range: 1,
  val: function val(d) {
    return d.t || (d.t = later.h.val(d) * 3600 + later.m.val(d) * 60 + later.s.val(d));
  },
  isValid: function isValid(d, value) {
    return later.t.val(d) === value;
  },
  extent: function extent() {
    return [0, 86399];
  },
  start: function start(d) {
    return d;
  },
  end: function end(d) {
    return d;
  },
  next: function next(d, value) {
    value = value > 86399 ? 0 : value;
    var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (value <= later.t.val(d) ? 1 : 0), 0, 0, value);

    if (!later.date.isUTC && next.getTime() < d.getTime()) {
      next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), later.h.val(next), later.m.val(next), value + 7200);
    }

    return next;
  },
  prev: function prev(d, value) {
    value = value > 86399 ? 86399 : value;
    return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (value >= later.t.val(d) ? -1 : 0), 0, 0, value);
  }
};
later.weekOfMonth = later.wm = {
  name: 'week of month',
  range: 604800,
  val: function val(d) {
    return d.wm || (d.wm = (later.D.val(d) + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(d))) / 7);
  },
  isValid: function isValid(d, value) {
    return later.wm.val(d) === (value || later.wm.extent(d)[1]);
  },
  extent: function extent(d) {
    return d.wmExtent || (d.wmExtent = [1, (later.D.extent(d)[1] + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(later.M.end(d)))) / 7]);
  },
  start: function start(d) {
    return d.wmStart || (d.wmStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(later.D.val(d) - later.dw.val(d) + 1, 1)));
  },
  end: function end(d) {
    return d.wmEnd || (d.wmEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.D.val(d) + (7 - later.dw.val(d)), later.D.extent(d)[1])));
  },
  next: function next(d, value) {
    value = value > later.wm.extent(d)[1] ? 1 : value;
    var month = later.date.nextRollover(d, value, later.wm, later.M);
    var wmMax = later.wm.extent(month)[1];
    value = value > wmMax ? 1 : value || wmMax;
    return later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (value - 1) * 7 - (later.dw.val(month) - 2)));
  },
  prev: function prev(d, value) {
    var month = later.date.prevRollover(d, value, later.wm, later.M);
    var wmMax = later.wm.extent(month)[1];
    value = value > wmMax ? wmMax : value || wmMax;
    return later.wm.end(later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (value - 1) * 7 - (later.dw.val(month) - 2))));
  }
};
later.weekOfYear = later.wy = {
  name: 'week of year (ISO)',
  range: 604800,
  val: function val(d) {
    if (d.wy) return d.wy;
    var wThur = later.dw.next(later.wy.start(d), 5);
    var YThur = later.dw.next(later.Y.prev(wThur, later.Y.val(wThur) - 1), 5);
    return d.wy = 1 + Math.ceil((wThur.getTime() - YThur.getTime()) / later.WEEK);
  },
  isValid: function isValid(d, value) {
    return later.wy.val(d) === (value || later.wy.extent(d)[1]);
  },
  extent: function extent(d) {
    if (d.wyExtent) return d.wyExtent;
    var year = later.dw.next(later.wy.start(d), 5);
    var dwFirst = later.dw.val(later.Y.start(year));
    var dwLast = later.dw.val(later.Y.end(year));
    return d.wyExtent = [1, dwFirst === 5 || dwLast === 5 ? 53 : 52];
  },
  start: function start(d) {
    return d.wyStart || (d.wyStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) - (later.dw.val(d) > 1 ? later.dw.val(d) - 2 : 6)));
  },
  end: function end(d) {
    return d.wyEnd || (d.wyEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (later.dw.val(d) > 1 ? 8 - later.dw.val(d) : 0)));
  },
  next: function next(d, value) {
    value = value > later.wy.extent(d)[1] ? 1 : value;
    var wyThur = later.dw.next(later.wy.start(d), 5);
    var year = later.date.nextRollover(wyThur, value, later.wy, later.Y);

    if (later.wy.val(year) !== 1) {
      year = later.dw.next(year, 2);
    }

    var wyMax = later.wy.extent(year)[1];
    var wyStart = later.wy.start(year);
    value = value > wyMax ? 1 : value || wyMax;
    return later.date.next(later.Y.val(wyStart), later.M.val(wyStart), later.D.val(wyStart) + 7 * (value - 1));
  },
  prev: function prev(d, value) {
    var wyThur = later.dw.next(later.wy.start(d), 5);
    var year = later.date.prevRollover(wyThur, value, later.wy, later.Y);

    if (later.wy.val(year) !== 1) {
      year = later.dw.next(year, 2);
    }

    var wyMax = later.wy.extent(year)[1];
    var wyEnd = later.wy.end(year);
    value = value > wyMax ? wyMax : value || wyMax;
    return later.wy.end(later.date.next(later.Y.val(wyEnd), later.M.val(wyEnd), later.D.val(wyEnd) + 7 * (value - 1)));
  }
};
later.year = later.Y = {
  name: 'year',
  range: 31556900,
  val: function val(d) {
    return d.Y || (d.Y = later.date.getYear.call(d));
  },
  isValid: function isValid(d, value) {
    return later.Y.val(d) === value;
  },
  extent: function extent() {
    return [1970, 2099];
  },
  start: function start(d) {
    return d.YStart || (d.YStart = later.date.next(later.Y.val(d)));
  },
  end: function end(d) {
    return d.YEnd || (d.YEnd = later.date.prev(later.Y.val(d)));
  },
  next: function next(d, value) {
    return value > later.Y.val(d) && value <= later.Y.extent()[1] ? later.date.next(value) : later.NEVER;
  },
  prev: function prev(d, value) {
    return value < later.Y.val(d) && value >= later.Y.extent()[0] ? later.date.prev(value) : later.NEVER;
  }
};
later.fullDate = later.fd = {
  name: 'full date',
  range: 1,
  val: function val(d) {
    return d.fd || (d.fd = d.getTime());
  },
  isValid: function isValid(d, value) {
    return later.fd.val(d) === value;
  },
  extent: function extent() {
    return [0, 3250368e7];
  },
  start: function start(d) {
    return d;
  },
  end: function end(d) {
    return d;
  },
  next: function next(d, value) {
    return later.fd.val(d) < value ? new Date(value) : later.NEVER;
  },
  prev: function prev(d, value) {
    return later.fd.val(d) > value ? new Date(value) : later.NEVER;
  }
};
later.modifier = {};

later.modifier.after = later.modifier.a = function (constraint, values) {
  var value = values[0];
  return {
    name: 'after ' + constraint.name,
    range: (constraint.extent(new Date())[1] - value) * constraint.range,
    val: constraint.val,
    isValid: function isValid(d, value_) {
      return this.val(d) >= value;
    },
    extent: constraint.extent,
    start: constraint.start,
    end: constraint.end,
    next: function next(startDate, value_) {
      if (value_ != value) value_ = constraint.extent(startDate)[0];
      return constraint.next(startDate, value_);
    },
    prev: function prev(startDate, value_) {
      value_ = value_ === value ? constraint.extent(startDate)[1] : value - 1;
      return constraint.prev(startDate, value_);
    }
  };
};

later.modifier.before = later.modifier.b = function (constraint, values) {
  var value = values[values.length - 1];
  return {
    name: 'before ' + constraint.name,
    range: constraint.range * (value - 1),
    val: constraint.val,
    isValid: function isValid(d, value_) {
      return this.val(d) < value;
    },
    extent: constraint.extent,
    start: constraint.start,
    end: constraint.end,
    next: function next(startDate, value_) {
      value_ = value_ === value ? constraint.extent(startDate)[0] : value;
      return constraint.next(startDate, value_);
    },
    prev: function prev(startDate, value_) {
      value_ = value_ === value ? value - 1 : constraint.extent(startDate)[1];
      return constraint.prev(startDate, value_);
    }
  };
};

later.compile = function (schedDef) {
  var constraints = [];
  var constraintsLength = 0;
  var tickConstraint;

  for (var key in schedDef) {
    var nameParts = key.split('_');
    var name = nameParts[0];
    var mod = nameParts[1];
    var vals = schedDef[key];
    var constraint = mod ? later.modifier[mod](later[name], vals) : later[name];
    constraints.push({
      constraint: constraint,
      vals: vals
    });
    constraintsLength++;
  }

  constraints.sort(function (a, b) {
    var ra = a.constraint.range;
    var rb = b.constraint.range;
    return rb < ra ? -1 : rb > ra ? 1 : 0;
  });
  tickConstraint = constraints[constraintsLength - 1].constraint;

  function compareFn(dir) {
    return dir === 'next' ? function (a, b) {
      return a.getTime() > b.getTime();
    } : function (a, b) {
      return b.getTime() > a.getTime();
    };
  }

  return {
    start: function start(dir, startDate) {
      var next = startDate;
      var nextValue = later.array[dir];
      var maxAttempts = 1e3;
      var done;

      while (maxAttempts-- && !done && next) {
        done = true;

        for (var i = 0; i < constraintsLength; i++) {
          var _constraint = constraints[i].constraint;

          var curValue = _constraint.val(next);

          var extent = _constraint.extent(next);

          var newValue = nextValue(curValue, constraints[i].vals, extent);

          if (!_constraint.isValid(next, newValue)) {
            next = _constraint[dir](next, newValue);
            done = false;
            break;
          }
        }
      }

      if (next !== later.NEVER) {
        next = dir === 'next' ? tickConstraint.start(next) : tickConstraint.end(next);
      }

      return next;
    },
    end: function end(dir, startDate) {
      var result;
      var nextValue = later.array[dir + 'Invalid'];
      var compare = compareFn(dir);

      for (var i = constraintsLength - 1; i >= 0; i--) {
        var _constraint2 = constraints[i].constraint;

        var curValue = _constraint2.val(startDate);

        var extent = _constraint2.extent(startDate);

        var newValue = nextValue(curValue, constraints[i].vals, extent);
        var next;

        if (newValue !== undefined) {
          next = _constraint2[dir](startDate, newValue);

          if (next && (!result || compare(result, next))) {
            result = next;
          }
        }
      }

      return result;
    },
    tick: function tick(dir, date) {
      return new Date(dir === 'next' ? tickConstraint.end(date).getTime() + later.SEC : tickConstraint.start(date).getTime() - later.SEC);
    },
    tickStart: function tickStart(date) {
      return tickConstraint.start(date);
    }
  };
};

later.schedule = function (sched) {
  if (!sched) throw new Error('Missing schedule definition.');
  if (!sched.schedules) throw new Error('Definition must include at least one schedule.');
  var schedules = [];
  var schedulesLength = sched.schedules.length;
  var exceptions = [];
  var exceptionsLength = sched.exceptions ? sched.exceptions.length : 0;

  for (var i = 0; i < schedulesLength; i++) {
    schedules.push(later.compile(sched.schedules[i]));
  }

  for (var j = 0; j < exceptionsLength; j++) {
    exceptions.push(later.compile(sched.exceptions[j]));
  }

  function getInstances(dir, count, startDate, endDate, isRange) {
    var compare = compareFn(dir);
    var loopCount = count;
    var maxAttempts = 1e3;
    var schedStarts = [];
    var exceptStarts = [];
    var next;
    var end;
    var results = [];
    var isForward = dir === 'next';
    var lastResult;
    var rStart = isForward ? 0 : 1;
    var rEnd = isForward ? 1 : 0;
    startDate = startDate ? new Date(startDate) : new Date();
    if (!startDate || !startDate.getTime()) throw new Error('Invalid start date.');
    setNextStarts(dir, schedules, schedStarts, startDate);
    setRangeStarts(dir, exceptions, exceptStarts, startDate);

    while (maxAttempts-- && loopCount && (next = findNext(schedStarts, compare))) {
      if (endDate && compare(next, endDate)) {
        break;
      }

      if (exceptionsLength) {
        updateRangeStarts(dir, exceptions, exceptStarts, next);

        if (end = calcRangeOverlap(dir, exceptStarts, next)) {
          updateNextStarts(dir, schedules, schedStarts, end);
          continue;
        }
      }

      if (isRange) {
        var maxEndDate = calcMaxEndDate(exceptStarts, compare);
        end = calcEnd(dir, schedules, schedStarts, next, maxEndDate);
        var r = isForward ? [new Date(Math.max(startDate, next)), end ? new Date(endDate ? Math.min(end, endDate) : end) : undefined] : [end ? new Date(endDate ? Math.max(endDate, end.getTime() + later.SEC) : end.getTime() + later.SEC) : undefined, new Date(Math.min(startDate, next.getTime() + later.SEC))];

        if (lastResult && r[rStart].getTime() === lastResult[rEnd].getTime()) {
          lastResult[rEnd] = r[rEnd];
          loopCount++;
        } else {
          lastResult = r;
          results.push(lastResult);
        }

        if (!end) break;
        updateNextStarts(dir, schedules, schedStarts, end);
      } else {
        results.push(isForward ? new Date(Math.max(startDate, next)) : getStart(schedules, schedStarts, next, endDate));
        tickStarts(dir, schedules, schedStarts, next);
      }

      loopCount--;
    }

    for (var _i = 0, length = results.length; _i < length; _i++) {
      var result = results[_i];
      results[_i] = Object.prototype.toString.call(result) === '[object Array]' ? [cleanDate(result[0]), cleanDate(result[1])] : cleanDate(result);
    }

    return results.length === 0 ? later.NEVER : count === 1 ? results[0] : results;
  }

  function cleanDate(d) {
    if (d instanceof Date && !isNaN(d.valueOf())) {
      return new Date(d);
    }

    return undefined;
  }

  function setNextStarts(dir, schedArray, startsArray, startDate) {
    for (var _i2 = 0, length = schedArray.length; _i2 < length; _i2++) {
      startsArray[_i2] = schedArray[_i2].start(dir, startDate);
    }
  }

  function updateNextStarts(dir, schedArray, startsArray, startDate) {
    var compare = compareFn(dir);

    for (var _i3 = 0, length = schedArray.length; _i3 < length; _i3++) {
      if (startsArray[_i3] && !compare(startsArray[_i3], startDate)) {
        startsArray[_i3] = schedArray[_i3].start(dir, startDate);
      }
    }
  }

  function setRangeStarts(dir, schedArray, rangesArray, startDate) {
    var compare = compareFn(dir);

    for (var _i4 = 0, length = schedArray.length; _i4 < length; _i4++) {
      var nextStart = schedArray[_i4].start(dir, startDate);

      if (!nextStart) {
        rangesArray[_i4] = later.NEVER;
      } else {
        rangesArray[_i4] = [nextStart, schedArray[_i4].end(dir, nextStart)];
      }
    }
  }

  function updateRangeStarts(dir, schedArray, rangesArray, startDate) {
    var compare = compareFn(dir);

    for (var _i5 = 0, length = schedArray.length; _i5 < length; _i5++) {
      if (rangesArray[_i5] && !compare(rangesArray[_i5][0], startDate)) {
        var nextStart = schedArray[_i5].start(dir, startDate);

        if (!nextStart) {
          rangesArray[_i5] = later.NEVER;
        } else {
          rangesArray[_i5] = [nextStart, schedArray[_i5].end(dir, nextStart)];
        }
      }
    }
  }

  function tickStarts(dir, schedArray, startsArray, startDate) {
    for (var _i6 = 0, length = schedArray.length; _i6 < length; _i6++) {
      if (startsArray[_i6] && startsArray[_i6].getTime() === startDate.getTime()) {
        startsArray[_i6] = schedArray[_i6].start(dir, schedArray[_i6].tick(dir, startDate));
      }
    }
  }

  function getStart(schedArray, startsArray, startDate, minEndDate) {
    var result;

    for (var _i7 = 0, length = startsArray.length; _i7 < length; _i7++) {
      if (startsArray[_i7] && startsArray[_i7].getTime() === startDate.getTime()) {
        var start = schedArray[_i7].tickStart(startDate);

        if (minEndDate && start < minEndDate) {
          return minEndDate;
        }

        if (!result || start > result) {
          result = start;
        }
      }
    }

    return result;
  }

  function calcRangeOverlap(dir, rangesArray, startDate) {
    var compare = compareFn(dir);
    var result;

    for (var _i8 = 0, length = rangesArray.length; _i8 < length; _i8++) {
      var range = rangesArray[_i8];

      if (range && !compare(range[0], startDate) && (!range[1] || compare(range[1], startDate))) {
        if (!result || compare(range[1], result)) {
          result = range[1];
        }
      }
    }

    return result;
  }

  function calcMaxEndDate(exceptsArray, compare) {
    var result;

    for (var _i9 = 0, length = exceptsArray.length; _i9 < length; _i9++) {
      if (exceptsArray[_i9] && (!result || compare(result, exceptsArray[_i9][0]))) {
        result = exceptsArray[_i9][0];
      }
    }

    return result;
  }

  function calcEnd(dir, schedArray, startsArray, startDate, maxEndDate) {
    var compare = compareFn(dir);
    var result;

    for (var _i10 = 0, length = schedArray.length; _i10 < length; _i10++) {
      var start = startsArray[_i10];

      if (start && start.getTime() === startDate.getTime()) {
        var end = schedArray[_i10].end(dir, start);

        if (maxEndDate && (!end || compare(end, maxEndDate))) {
          return maxEndDate;
        }

        if (!result || compare(end, result)) {
          result = end;
        }
      }
    }

    return result;
  }

  function compareFn(dir) {
    return dir === 'next' ? function (a, b) {
      return !b || a.getTime() > b.getTime();
    } : function (a, b) {
      return !a || b.getTime() > a.getTime();
    };
  }

  function findNext(array, compare) {
    var next = array[0];

    for (var _i11 = 1, length = array.length; _i11 < length; _i11++) {
      if (array[_i11] && compare(next, array[_i11])) {
        next = array[_i11];
      }
    }

    return next;
  }

  return {
    isValid: function isValid(d) {
      return getInstances('next', 1, d, d) !== later.NEVER;
    },
    next: function next(count, startDate, endDate) {
      return getInstances('next', count || 1, startDate, endDate);
    },
    prev: function prev(count, startDate, endDate) {
      return getInstances('prev', count || 1, startDate, endDate);
    },
    nextRange: function nextRange(count, startDate, endDate) {
      return getInstances('next', count || 1, startDate, endDate, true);
    },
    prevRange: function prevRange(count, startDate, endDate) {
      return getInstances('prev', count || 1, startDate, endDate, true);
    }
  };
};

later.setTimeout = function (fn, sched) {
  var s = later.schedule(sched);
  var t;

  if (fn) {
    scheduleTimeout();
  }

  function scheduleTimeout() {
    var now = Date.now();
    var next = s.next(2, now);

    if (!next[0]) {
      t = undefined;
      return;
    }

    var diff = next[0].getTime() - now;

    if (diff < 1e3) {
      diff = next[1] ? next[1].getTime() - now : 1e3;
    }

    if (diff < 2147483647) {
      t = setTimeout(fn, diff);
    } else {
      t = setTimeout(scheduleTimeout, 2147483647);
    }
  }

  return {
    isDone: function isDone() {
      return !t;
    },
    clear: function clear() {
      clearTimeout(t);
    }
  };
};

later.setInterval = function (fn, sched) {
  if (!fn) {
    return;
  }

  var t = later.setTimeout(scheduleTimeout, sched);
  var done = t.isDone();

  function scheduleTimeout() {
    if (!done) {
      fn();
      t = later.setTimeout(scheduleTimeout, sched);
    }
  }

  return {
    isDone: function isDone() {
      return t.isDone();
    },
    clear: function clear() {
      done = true;
      t.clear();
    }
  };
};

later.date = {};

later.date.timezone = function (useLocalTime) {
  later.date.build = useLocalTime ? function (Y, M, D, h, m, s) {
    return new Date(Y, M, D, h, m, s);
  } : function (Y, M, D, h, m, s) {
    return new Date(Date.UTC(Y, M, D, h, m, s));
  };
  var get = useLocalTime ? 'get' : 'getUTC';
  var d = Date.prototype;
  later.date.getYear = d[get + 'FullYear'];
  later.date.getMonth = d[get + 'Month'];
  later.date.getDate = d[get + 'Date'];
  later.date.getDay = d[get + 'Day'];
  later.date.getHour = d[get + 'Hours'];
  later.date.getMin = d[get + 'Minutes'];
  later.date.getSec = d[get + 'Seconds'];
  later.date.isUTC = !useLocalTime;
};

later.date.UTC = function () {
  later.date.timezone(false);
};

later.date.localTime = function () {
  later.date.timezone(true);
};

later.date.UTC();
later.SEC = 1e3;
later.MIN = later.SEC * 60;
later.HOUR = later.MIN * 60;
later.DAY = later.HOUR * 24;
later.WEEK = later.DAY * 7;
later.DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
later.NEVER = 0;

later.date.next = function (Y, M, D, h, m, s) {
  return later.date.build(Y, M !== undefined ? M - 1 : 0, D !== undefined ? D : 1, h || 0, m || 0, s || 0);
};

later.date.nextRollover = function (d, value, constraint, period) {
  var cur = constraint.val(d);
  var max = constraint.extent(d)[1];
  return (value || max) <= cur || value > max ? new Date(period.end(d).getTime() + later.SEC) : period.start(d);
};

later.date.prev = function (Y, M, D, h, m, s) {
  var length = arguments.length;
  M = length < 2 ? 11 : M - 1;
  D = length < 3 ? later.D.extent(later.date.next(Y, M + 1))[1] : D;
  h = length < 4 ? 23 : h;
  m = length < 5 ? 59 : m;
  s = length < 6 ? 59 : s;
  return later.date.build(Y, M, D, h, m, s);
};

later.date.prevRollover = function (d, value, constraint, period) {
  var cur = constraint.val(d);
  return value >= cur || !value ? period.start(period.prev(d, period.val(d) - 1)) : period.start(d);
};

later.parse = {};

later.parse.cron = function (expr, hasSeconds) {
  var NAMES = {
    JAN: 1,
    FEB: 2,
    MAR: 3,
    APR: 4,
    MAY: 5,
    JUN: 6,
    JUL: 7,
    AUG: 8,
    SEP: 9,
    OCT: 10,
    NOV: 11,
    DEC: 12,
    SUN: 1,
    MON: 2,
    TUE: 3,
    WED: 4,
    THU: 5,
    FRI: 6,
    SAT: 7
  };
  var REPLACEMENTS = {
    '* * * * * *': '0/1 * * * * *',
    '@YEARLY': '0 0 1 1 *',
    '@ANNUALLY': '0 0 1 1 *',
    '@MONTHLY': '0 0 1 * *',
    '@WEEKLY': '0 0 * * 0',
    '@DAILY': '0 0 * * *',
    '@HOURLY': '0 * * * *'
  };
  var FIELDS = {
    s: [0, 0, 59],
    m: [1, 0, 59],
    h: [2, 0, 23],
    D: [3, 1, 31],
    M: [4, 1, 12],
    Y: [6, 1970, 2099],
    d: [5, 1, 7, 1]
  };

  function getValue(value, offset, max) {
    return isNaN(value) ? NAMES[value] || null : Math.min(Number(value) + (offset || 0), max || 9999);
  }

  function cloneSchedule(sched) {
    var clone = {};
    var field;

    for (field in sched) {
      if (field !== 'dc' && field !== 'd') {
        clone[field] = sched[field].slice(0);
      }
    }

    return clone;
  }

  function add(sched, name, min, max, inc) {
    var i = min;

    if (!sched[name]) {
      sched[name] = [];
    }

    while (i <= max) {
      if (!sched[name].includes(i)) {
        sched[name].push(i);
      }

      i += inc || 1;
    }

    sched[name].sort(function (a, b) {
      return a - b;
    });
  }

  function addHash(schedules, curSched, value, hash) {
    if (curSched.d && !curSched.dc || curSched.dc && !curSched.dc.includes(hash)) {
      schedules.push(cloneSchedule(curSched));
      curSched = schedules[schedules.length - 1];
    }

    add(curSched, 'd', value, value);
    add(curSched, 'dc', hash, hash);
  }

  function addWeekday(s, curSched, value) {
    var except1 = {};
    var except2 = {};

    if (value === 1) {
      add(curSched, 'D', 1, 3);
      add(curSched, 'd', NAMES.MON, NAMES.FRI);
      add(except1, 'D', 2, 2);
      add(except1, 'd', NAMES.TUE, NAMES.FRI);
      add(except2, 'D', 3, 3);
      add(except2, 'd', NAMES.TUE, NAMES.FRI);
    } else {
      add(curSched, 'D', value - 1, value + 1);
      add(curSched, 'd', NAMES.MON, NAMES.FRI);
      add(except1, 'D', value - 1, value - 1);
      add(except1, 'd', NAMES.MON, NAMES.THU);
      add(except2, 'D', value + 1, value + 1);
      add(except2, 'd', NAMES.TUE, NAMES.FRI);
    }

    s.exceptions.push(except1);
    s.exceptions.push(except2);
  }

  function addRange(item, curSched, name, min, max, offset) {
    var incSplit = item.split('/');
    var inc = Number(incSplit[1]);
    var range = incSplit[0];

    if (range !== '*' && range !== '0') {
      var rangeSplit = range.split('-');
      min = getValue(rangeSplit[0], offset, max);
      max = getValue(rangeSplit[1], offset, max) || max;
    }

    add(curSched, name, min, max, inc);
  }

  function parse(item, s, name, min, max, offset) {
    var value;
    var split;
    var schedules = s.schedules;
    var curSched = schedules[schedules.length - 1];

    if (item === 'L') {
      item = min - 1;
    }

    if ((value = getValue(item, offset, max)) !== null) {
      add(curSched, name, value, value);
    } else if ((value = getValue(item.replace('W', ''), offset, max)) !== null) {
      addWeekday(s, curSched, value);
    } else if ((value = getValue(item.replace('L', ''), offset, max)) !== null) {
      addHash(schedules, curSched, value, min - 1);
    } else if ((split = item.split('#')).length === 2) {
      value = getValue(split[0], offset, max);
      addHash(schedules, curSched, value, getValue(split[1]));
    } else {
      addRange(item, curSched, name, min, max, offset);
    }
  }

  function isHash(item) {
    return item.includes('#') || item.indexOf('L') > 0;
  }

  function itemSorter(a, b) {
    return isHash(a) && !isHash(b) ? 1 : a - b;
  }

  function parseExpr(expr) {
    var schedule = {
      schedules: [{}],
      exceptions: []
    };
    var components = expr.replace(/(\s)+/g, ' ').split(' ');
    var field;
    var f;
    var component;
    var items;

    for (field in FIELDS) {
      f = FIELDS[field];
      component = components[f[0]];

      if (component && component !== '*' && component !== '?') {
        items = component.split(',').sort(itemSorter);
        var i;
        var _items = items,
            length = _items.length;

        for (i = 0; i < length; i++) {
          parse(items[i], schedule, field, f[1], f[2], f[3]);
        }
      }
    }

    return schedule;
  }

  function prepareExpr(expr) {
    var prepared = expr.toUpperCase();
    return REPLACEMENTS[prepared] || prepared;
  }

  var e = prepareExpr(expr);
  return parseExpr(hasSeconds ? e : '0 ' + e);
};

later.parse.recur = function () {
  var schedules = [];
  var exceptions = [];
  var cur;
  var curArray = schedules;
  var curName;
  var values;

  var _every;

  var modifier;
  var applyMin;
  var applyMax;
  var i;
  var last;

  function add(name, min, max) {
    name = modifier ? name + '_' + modifier : name;

    if (!cur) {
      curArray.push({});
      cur = curArray[0];
    }

    if (!cur[name]) {
      cur[name] = [];
    }

    curName = cur[name];

    if (_every) {
      values = [];

      for (i = min; i <= max; i += _every) {
        values.push(i);
      }

      last = {
        n: name,
        x: _every,
        c: curName.length,
        m: max
      };
    }

    values = applyMin ? [min] : applyMax ? [max] : values;
    var _values = values,
        length = _values.length;

    for (i = 0; i < length; i += 1) {
      var value = values[i];

      if (!curName.includes(value)) {
        curName.push(value);
      }
    }

    values = _every = modifier = applyMin = applyMax = 0;
  }

  return {
    schedules: schedules,
    exceptions: exceptions,
    on: function on() {
      values = Array.isArray(arguments[0]) ? arguments[0] : arguments;
      return this;
    },
    every: function every(x) {
      _every = x || 1;
      return this;
    },
    after: function after(x) {
      modifier = 'a';
      values = [x];
      return this;
    },
    before: function before(x) {
      modifier = 'b';
      values = [x];
      return this;
    },
    first: function first() {
      applyMin = 1;
      return this;
    },
    last: function last() {
      applyMax = 1;
      return this;
    },
    time: function time() {
      for (var _i12 = 0, _values2 = values, length = _values2.length; _i12 < length; _i12++) {
        var split = values[_i12].split(':');

        if (split.length < 3) split.push(0);
        values[_i12] = Number(split[0]) * 3600 + Number(split[1]) * 60 + Number(split[2]);
      }

      add('t');
      return this;
    },
    second: function second() {
      add('s', 0, 59);
      return this;
    },
    minute: function minute() {
      add('m', 0, 59);
      return this;
    },
    hour: function hour() {
      add('h', 0, 23);
      return this;
    },
    dayOfMonth: function dayOfMonth() {
      add('D', 1, applyMax ? 0 : 31);
      return this;
    },
    dayOfWeek: function dayOfWeek() {
      add('d', 1, 7);
      return this;
    },
    onWeekend: function onWeekend() {
      values = [1, 7];
      return this.dayOfWeek();
    },
    onWeekday: function onWeekday() {
      values = [2, 3, 4, 5, 6];
      return this.dayOfWeek();
    },
    dayOfWeekCount: function dayOfWeekCount() {
      add('dc', 1, applyMax ? 0 : 5);
      return this;
    },
    dayOfYear: function dayOfYear() {
      add('dy', 1, applyMax ? 0 : 366);
      return this;
    },
    weekOfMonth: function weekOfMonth() {
      add('wm', 1, applyMax ? 0 : 5);
      return this;
    },
    weekOfYear: function weekOfYear() {
      add('wy', 1, applyMax ? 0 : 53);
      return this;
    },
    month: function month() {
      add('M', 1, 12);
      return this;
    },
    year: function year() {
      add('Y', 1970, 2450);
      return this;
    },
    fullDate: function fullDate() {
      for (var _i13 = 0, _values3 = values, length = _values3.length; _i13 < length; _i13++) {
        values[_i13] = values[_i13].getTime();
      }

      add('fd');
      return this;
    },
    customModifier: function customModifier(id, vals) {
      var custom = later.modifier[id];
      if (!custom) throw new Error('Custom modifier ' + id + ' not recognized!');
      modifier = id;
      values = Array.isArray(arguments[1]) ? arguments[1] : [arguments[1]];
      return this;
    },
    customPeriod: function customPeriod(id) {
      var custom = later[id];
      if (!custom) throw new Error('Custom time period ' + id + ' not recognized!');
      add(id, custom.extent(new Date())[0], custom.extent(new Date())[1]);
      return this;
    },
    startingOn: function startingOn(start) {
      return this.between(start, last.m);
    },
    between: function between(start, end) {
      cur[last.n] = cur[last.n].splice(0, last.c);
      _every = last.x;
      add(last.n, start, end);
      return this;
    },
    and: function and() {
      cur = curArray[curArray.push({}) - 1];
      return this;
    },
    except: function except() {
      curArray = exceptions;
      cur = null;
      return this;
    }
  };
};

later.parse.text = function (string) {
  var recur = later.parse.recur;
  var pos = 0;
  var input = '';
  var error;
  var TOKENTYPES = {
    eof: /^$/,
    rank: /^((\d+)(st|nd|rd|th)?)\b/,
    time: /^(((0?[1-9]|1[0-2]):[0-5]\d(\s)?(am|pm))|((0?\d|1\d|2[0-3]):[0-5]\d))\b/,
    dayName: /^((sun|mon|tue(s)?|wed(nes)?|thu(r(s)?)?|fri|sat(ur)?)(day)?)\b/,
    monthName: /^(jan(uary)?|feb(ruary)?|ma((r(ch)?)?|y)|apr(il)?|ju(ly|ne)|aug(ust)?|oct(ober)?|(sept|nov|dec)(ember)?)\b/,
    yearIndex: /^(\d{4})\b/,
    every: /^every\b/,
    after: /^after\b/,
    before: /^before\b/,
    second: /^(s|sec(ond)?(s)?)\b/,
    minute: /^(m|min(ute)?(s)?)\b/,
    hour: /^(h|hour(s)?)\b/,
    day: /^(day(s)?( of the month)?)\b/,
    dayInstance: /^day instance\b/,
    dayOfWeek: /^day(s)? of the week\b/,
    dayOfYear: /^day(s)? of the year\b/,
    weekOfYear: /^week(s)?( of the year)?\b/,
    weekOfMonth: /^week(s)? of the month\b/,
    weekday: /^weekday\b/,
    weekend: /^weekend\b/,
    month: /^month(s)?\b/,
    year: /^year(s)?\b/,
    between: /^between (the)?\b/,
    start: /^(start(ing)? (at|on( the)?)?)\b/,
    at: /^(at|@)\b/,
    and: /^(,|and\b)/,
    except: /^(except\b)/,
    also: /(also)\b/,
    first: /^(first)\b/,
    last: /^last\b/,
    in: /^in\b/,
    of: /^of\b/,
    onthe: /^on the\b/,
    on: /^on\b/,
    through: /(-|^(to|through)\b)/
  };
  var NAMES = {
    jan: 1,
    feb: 2,
    mar: 3,
    apr: 4,
    may: 5,
    jun: 6,
    jul: 7,
    aug: 8,
    sep: 9,
    oct: 10,
    nov: 11,
    dec: 12,
    sun: 1,
    mon: 2,
    tue: 3,
    wed: 4,
    thu: 5,
    fri: 6,
    sat: 7,
    '1st': 1,
    fir: 1,
    '2nd': 2,
    sec: 2,
    '3rd': 3,
    thi: 3,
    '4th': 4,
    for: 4
  };

  function t(start, end, text, type) {
    return {
      startPos: start,
      endPos: end,
      text: text,
      type: type
    };
  }

  function peek(expected) {
    var scanTokens = Array.isArray(expected) ? expected : [expected];
    var whiteSpace = /\s+/;
    var token;
    var curInput;
    var m;
    var scanToken;
    var start;
    var length_;
    scanTokens.push(whiteSpace);
    start = pos;

    while (!token || token.type === whiteSpace) {
      length_ = -1;
      curInput = input.slice(Math.max(0, start));
      token = t(start, start, input.split(whiteSpace)[0]);
      var i;
      var length = scanTokens.length;

      for (i = 0; i < length; i++) {
        scanToken = scanTokens[i];
        m = scanToken.exec(curInput);

        if (m && m.index === 0 && m[0].length > length_) {
          length_ = m[0].length;
          token = t(start, start + length_, curInput.slice(0, Math.max(0, length_)), scanToken);
        }
      }

      if (token.type === whiteSpace) {
        start = token.endPos;
      }
    }

    return token;
  }

  function scan(expectedToken) {
    var token = peek(expectedToken);
    pos = token.endPos;
    return token;
  }

  function parseThroughExpr(tokenType) {
    var start = Number(parseTokenValue(tokenType));
    var end = checkAndParse(TOKENTYPES.through) ? Number(parseTokenValue(tokenType)) : start;
    var nums = [];

    for (var i = start; i <= end; i++) {
      nums.push(i);
    }

    return nums;
  }

  function parseRanges(tokenType) {
    var nums = parseThroughExpr(tokenType);

    while (checkAndParse(TOKENTYPES.and)) {
      nums = nums.concat(parseThroughExpr(tokenType));
    }

    return nums;
  }

  function parseEvery(r) {
    var number;
    var period;
    var start;
    var end;

    if (checkAndParse(TOKENTYPES.weekend)) {
      r.on(NAMES.sun, NAMES.sat).dayOfWeek();
    } else if (checkAndParse(TOKENTYPES.weekday)) {
      r.on(NAMES.mon, NAMES.tue, NAMES.wed, NAMES.thu, NAMES.fri).dayOfWeek();
    } else {
      number = parseTokenValue(TOKENTYPES.rank);
      r.every(number);
      period = parseTimePeriod(r);

      if (checkAndParse(TOKENTYPES.start)) {
        number = parseTokenValue(TOKENTYPES.rank);
        r.startingOn(number);
        parseToken(period.type);
      } else if (checkAndParse(TOKENTYPES.between)) {
        start = parseTokenValue(TOKENTYPES.rank);

        if (checkAndParse(TOKENTYPES.and)) {
          end = parseTokenValue(TOKENTYPES.rank);
          r.between(start, end);
        }
      }
    }
  }

  function parseOnThe(r) {
    if (checkAndParse(TOKENTYPES.first)) {
      r.first();
    } else if (checkAndParse(TOKENTYPES.last)) {
      r.last();
    } else {
      r.on(parseRanges(TOKENTYPES.rank));
    }

    parseTimePeriod(r);
  }

  function parseScheduleExpr(string_) {
    pos = 0;
    input = string_;
    error = -1;
    var r = recur();

    while (pos < input.length && error < 0) {
      var token = parseToken([TOKENTYPES.every, TOKENTYPES.after, TOKENTYPES.before, TOKENTYPES.onthe, TOKENTYPES.on, TOKENTYPES.of, TOKENTYPES.in, TOKENTYPES.at, TOKENTYPES.and, TOKENTYPES.except, TOKENTYPES.also]);

      switch (token.type) {
        case TOKENTYPES.every:
          parseEvery(r);
          break;

        case TOKENTYPES.after:
          if (peek(TOKENTYPES.time).type !== undefined) {
            r.after(parseTokenValue(TOKENTYPES.time));
            r.time();
          } else {
            r.after(parseTokenValue(TOKENTYPES.rank));
            parseTimePeriod(r);
          }

          break;

        case TOKENTYPES.before:
          if (peek(TOKENTYPES.time).type !== undefined) {
            r.before(parseTokenValue(TOKENTYPES.time));
            r.time();
          } else {
            r.before(parseTokenValue(TOKENTYPES.rank));
            parseTimePeriod(r);
          }

          break;

        case TOKENTYPES.onthe:
          parseOnThe(r);
          break;

        case TOKENTYPES.on:
          r.on(parseRanges(TOKENTYPES.dayName)).dayOfWeek();
          break;

        case TOKENTYPES.of:
          r.on(parseRanges(TOKENTYPES.monthName)).month();
          break;

        case TOKENTYPES.in:
          r.on(parseRanges(TOKENTYPES.yearIndex)).year();
          break;

        case TOKENTYPES.at:
          r.on(parseTokenValue(TOKENTYPES.time)).time();

          while (checkAndParse(TOKENTYPES.and)) {
            r.on(parseTokenValue(TOKENTYPES.time)).time();
          }

          break;

        case TOKENTYPES.and:
          break;

        case TOKENTYPES.also:
          r.and();
          break;

        case TOKENTYPES.except:
          r.except();
          break;

        default:
          error = pos;
      }
    }

    return {
      schedules: r.schedules,
      exceptions: r.exceptions,
      error: error
    };
  }

  function parseTimePeriod(r) {
    var timePeriod = parseToken([TOKENTYPES.second, TOKENTYPES.minute, TOKENTYPES.hour, TOKENTYPES.dayOfYear, TOKENTYPES.dayOfWeek, TOKENTYPES.dayInstance, TOKENTYPES.day, TOKENTYPES.month, TOKENTYPES.year, TOKENTYPES.weekOfMonth, TOKENTYPES.weekOfYear]);

    switch (timePeriod.type) {
      case TOKENTYPES.second:
        r.second();
        break;

      case TOKENTYPES.minute:
        r.minute();
        break;

      case TOKENTYPES.hour:
        r.hour();
        break;

      case TOKENTYPES.dayOfYear:
        r.dayOfYear();
        break;

      case TOKENTYPES.dayOfWeek:
        r.dayOfWeek();
        break;

      case TOKENTYPES.dayInstance:
        r.dayOfWeekCount();
        break;

      case TOKENTYPES.day:
        r.dayOfMonth();
        break;

      case TOKENTYPES.weekOfMonth:
        r.weekOfMonth();
        break;

      case TOKENTYPES.weekOfYear:
        r.weekOfYear();
        break;

      case TOKENTYPES.month:
        r.month();
        break;

      case TOKENTYPES.year:
        r.year();
        break;

      default:
        error = pos;
    }

    return timePeriod;
  }

  function checkAndParse(tokenType) {
    var found = peek(tokenType).type === tokenType;

    if (found) {
      scan(tokenType);
    }

    return found;
  }

  function parseToken(tokenType) {
    var t = scan(tokenType);

    if (t.type) {
      t.text = convertString(t.text, tokenType);
    } else {
      error = pos;
    }

    return t;
  }

  function parseTokenValue(tokenType) {
    return parseToken(tokenType).text;
  }

  function convertString(string_, tokenType) {
    var output = string_;

    switch (tokenType) {
      case TOKENTYPES.time:
        /*
        const parts = string_.split(/(:|am|pm)/);
        const hour =
          parts[3] === 'pm' && parts[0] < 12
            ? Number.parseInt(parts[0], 10) + 12
            : parts[0];
        const min = parts[2].trim();
        output = (hour.length === 1 ? '0' : '') + hour + ':' + min;
        */
        // <https://github.com/bunkat/later/pull/188>
        var parts = string_.split(/(:|am|pm)/);
        var hour = Number.parseInt(parts[0], 10);
        var min = parts[2].trim();

        if (parts[3] === 'pm' && hour < 12) {
          hour += 12;
        } else if (parts[3] === 'am' && hour === 12) {
          hour -= 12;
        }

        hour = String(hour);
        output = (hour.length === 1 ? '0' : '') + hour + ':' + min;
        break;

      case TOKENTYPES.rank:
        output = Number.parseInt(/^\d+/.exec(string_)[0], 10);
        break;

      case TOKENTYPES.monthName:
      case TOKENTYPES.dayName:
        output = NAMES[string_.slice(0, 3)];
        break;
    }

    return output;
  }

  return parseScheduleExpr(string.toLowerCase());
};

module.exports = later;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwa2ciLCJyZXF1aXJlIiwibGF0ZXIiLCJ2ZXJzaW9uIiwiYXJyYXkiLCJzb3J0IiwiemVyb0lzTGFzdCIsImEiLCJiIiwiTnVtYmVyIiwicHVzaCIsInNoaWZ0IiwibmV4dCIsInZhbHVlIiwidmFsdWVzIiwiZXh0ZW50IiwiY3VyIiwiemVyb0lzTGFyZ2VzdCIsIm5leHRJZHgiLCJpIiwibGVuZ3RoIiwibmV4dEludmFsaWQiLCJtaW4iLCJtYXgiLCJ6ZXJvVmFsdWUiLCJpbmRleE9mIiwic3RhcnQiLCJ1bmRlZmluZWQiLCJwcmV2IiwicHJldmlvdXNJZHgiLCJwcmV2SW52YWxpZCIsImRheSIsIkQiLCJuYW1lIiwicmFuZ2UiLCJ2YWwiLCJkIiwiZGF0ZSIsImdldERhdGUiLCJjYWxsIiwiaXNWYWxpZCIsIkRFeHRlbnQiLCJtb250aCIsIk0iLCJEQVlTX0lOX01PTlRIIiwiZHkiLCJEU3RhcnQiLCJZIiwiZW5kIiwiREVuZCIsIm5leHRSb2xsb3ZlciIsIkRNYXgiLCJwcmV2Um9sbG92ZXIiLCJkYXlPZldlZWtDb3VudCIsImRjIiwiTWF0aCIsImZsb29yIiwiZGNFeHRlbnQiLCJjZWlsIiwiZGNTdGFydCIsImRjRW5kIiwiZGNNYXgiLCJnZXRUaW1lIiwiZGF5T2ZXZWVrIiwiZHciLCJnZXREYXkiLCJkYXlPZlllYXIiLCJEQVkiLCJ5ZWFyIiwiZHlFeHRlbnQiLCJkeU1heCIsImhvdXIiLCJoIiwiZ2V0SG91ciIsImhTdGFydCIsImhFbmQiLCJpc1VUQyIsIm1pbnV0ZSIsIm0iLCJnZXRNaW4iLCJtU3RhcnQiLCJtRW5kIiwicyIsImluYyIsIkRhdGUiLCJNSU4iLCJTRUMiLCJnZXRNb250aCIsIk1TdGFydCIsIk1FbmQiLCJzZWNvbmQiLCJnZXRTZWMiLCJjYWNoZSIsInRpbWUiLCJ0Iiwid2Vla09mTW9udGgiLCJ3bSIsIndtRXh0ZW50Iiwid21TdGFydCIsIndtRW5kIiwid21NYXgiLCJ3ZWVrT2ZZZWFyIiwid3kiLCJ3VGh1ciIsIllUaHVyIiwiV0VFSyIsInd5RXh0ZW50IiwiZHdGaXJzdCIsImR3TGFzdCIsInd5U3RhcnQiLCJ3eUVuZCIsInd5VGh1ciIsInd5TWF4IiwiZ2V0WWVhciIsIllTdGFydCIsIllFbmQiLCJORVZFUiIsImZ1bGxEYXRlIiwiZmQiLCJtb2RpZmllciIsImFmdGVyIiwiY29uc3RyYWludCIsInZhbHVlXyIsInN0YXJ0RGF0ZSIsImJlZm9yZSIsImNvbXBpbGUiLCJzY2hlZERlZiIsImNvbnN0cmFpbnRzIiwiY29uc3RyYWludHNMZW5ndGgiLCJ0aWNrQ29uc3RyYWludCIsImtleSIsIm5hbWVQYXJ0cyIsInNwbGl0IiwibW9kIiwidmFscyIsInJhIiwicmIiLCJjb21wYXJlRm4iLCJkaXIiLCJuZXh0VmFsdWUiLCJtYXhBdHRlbXB0cyIsImRvbmUiLCJjdXJWYWx1ZSIsIm5ld1ZhbHVlIiwicmVzdWx0IiwiY29tcGFyZSIsInRpY2siLCJ0aWNrU3RhcnQiLCJzY2hlZHVsZSIsInNjaGVkIiwiRXJyb3IiLCJzY2hlZHVsZXMiLCJzY2hlZHVsZXNMZW5ndGgiLCJleGNlcHRpb25zIiwiZXhjZXB0aW9uc0xlbmd0aCIsImoiLCJnZXRJbnN0YW5jZXMiLCJjb3VudCIsImVuZERhdGUiLCJpc1JhbmdlIiwibG9vcENvdW50Iiwic2NoZWRTdGFydHMiLCJleGNlcHRTdGFydHMiLCJyZXN1bHRzIiwiaXNGb3J3YXJkIiwibGFzdFJlc3VsdCIsInJTdGFydCIsInJFbmQiLCJzZXROZXh0U3RhcnRzIiwic2V0UmFuZ2VTdGFydHMiLCJmaW5kTmV4dCIsInVwZGF0ZVJhbmdlU3RhcnRzIiwiY2FsY1JhbmdlT3ZlcmxhcCIsInVwZGF0ZU5leHRTdGFydHMiLCJtYXhFbmREYXRlIiwiY2FsY01heEVuZERhdGUiLCJjYWxjRW5kIiwiciIsImdldFN0YXJ0IiwidGlja1N0YXJ0cyIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2xlYW5EYXRlIiwiaXNOYU4iLCJ2YWx1ZU9mIiwic2NoZWRBcnJheSIsInN0YXJ0c0FycmF5IiwicmFuZ2VzQXJyYXkiLCJuZXh0U3RhcnQiLCJtaW5FbmREYXRlIiwiZXhjZXB0c0FycmF5IiwibmV4dFJhbmdlIiwicHJldlJhbmdlIiwic2V0VGltZW91dCIsImZuIiwic2NoZWR1bGVUaW1lb3V0Iiwibm93IiwiZGlmZiIsImlzRG9uZSIsImNsZWFyIiwiY2xlYXJUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJ0aW1lem9uZSIsInVzZUxvY2FsVGltZSIsImJ1aWxkIiwiVVRDIiwiZ2V0IiwibG9jYWxUaW1lIiwiSE9VUiIsInBlcmlvZCIsImFyZ3VtZW50cyIsInBhcnNlIiwiY3JvbiIsImV4cHIiLCJoYXNTZWNvbmRzIiwiTkFNRVMiLCJKQU4iLCJGRUIiLCJNQVIiLCJBUFIiLCJNQVkiLCJKVU4iLCJKVUwiLCJBVUciLCJTRVAiLCJPQ1QiLCJOT1YiLCJERUMiLCJTVU4iLCJNT04iLCJUVUUiLCJXRUQiLCJUSFUiLCJGUkkiLCJTQVQiLCJSRVBMQUNFTUVOVFMiLCJGSUVMRFMiLCJnZXRWYWx1ZSIsIm9mZnNldCIsImNsb25lU2NoZWR1bGUiLCJjbG9uZSIsImZpZWxkIiwic2xpY2UiLCJhZGQiLCJpbmNsdWRlcyIsImFkZEhhc2giLCJjdXJTY2hlZCIsImhhc2giLCJhZGRXZWVrZGF5IiwiZXhjZXB0MSIsImV4Y2VwdDIiLCJhZGRSYW5nZSIsIml0ZW0iLCJpbmNTcGxpdCIsInJhbmdlU3BsaXQiLCJyZXBsYWNlIiwiaXNIYXNoIiwiaXRlbVNvcnRlciIsInBhcnNlRXhwciIsImNvbXBvbmVudHMiLCJmIiwiY29tcG9uZW50IiwiaXRlbXMiLCJwcmVwYXJlRXhwciIsInByZXBhcmVkIiwidG9VcHBlckNhc2UiLCJlIiwicmVjdXIiLCJjdXJBcnJheSIsImN1ck5hbWUiLCJldmVyeSIsImFwcGx5TWluIiwiYXBwbHlNYXgiLCJsYXN0IiwibiIsIngiLCJjIiwib24iLCJBcnJheSIsImlzQXJyYXkiLCJmaXJzdCIsImRheU9mTW9udGgiLCJvbldlZWtlbmQiLCJvbldlZWtkYXkiLCJjdXN0b21Nb2RpZmllciIsImlkIiwiY3VzdG9tIiwiY3VzdG9tUGVyaW9kIiwic3RhcnRpbmdPbiIsImJldHdlZW4iLCJzcGxpY2UiLCJhbmQiLCJleGNlcHQiLCJ0ZXh0Iiwic3RyaW5nIiwicG9zIiwiaW5wdXQiLCJlcnJvciIsIlRPS0VOVFlQRVMiLCJlb2YiLCJyYW5rIiwiZGF5TmFtZSIsIm1vbnRoTmFtZSIsInllYXJJbmRleCIsImRheUluc3RhbmNlIiwid2Vla2RheSIsIndlZWtlbmQiLCJhdCIsImFsc28iLCJpbiIsIm9mIiwib250aGUiLCJ0aHJvdWdoIiwiamFuIiwiZmViIiwibWFyIiwiYXByIiwibWF5IiwianVuIiwianVsIiwiYXVnIiwic2VwIiwib2N0Iiwibm92IiwiZGVjIiwic3VuIiwibW9uIiwidHVlIiwid2VkIiwidGh1IiwiZnJpIiwic2F0IiwiZmlyIiwic2VjIiwidGhpIiwiZm9yIiwidHlwZSIsInN0YXJ0UG9zIiwiZW5kUG9zIiwicGVlayIsImV4cGVjdGVkIiwic2NhblRva2VucyIsIndoaXRlU3BhY2UiLCJ0b2tlbiIsImN1cklucHV0Iiwic2NhblRva2VuIiwibGVuZ3RoXyIsImV4ZWMiLCJpbmRleCIsInNjYW4iLCJleHBlY3RlZFRva2VuIiwicGFyc2VUaHJvdWdoRXhwciIsInRva2VuVHlwZSIsInBhcnNlVG9rZW5WYWx1ZSIsImNoZWNrQW5kUGFyc2UiLCJudW1zIiwicGFyc2VSYW5nZXMiLCJjb25jYXQiLCJwYXJzZUV2ZXJ5IiwibnVtYmVyIiwicGFyc2VUaW1lUGVyaW9kIiwicGFyc2VUb2tlbiIsInBhcnNlT25UaGUiLCJwYXJzZVNjaGVkdWxlRXhwciIsInN0cmluZ18iLCJ0aW1lUGVyaW9kIiwiZm91bmQiLCJjb252ZXJ0U3RyaW5nIiwib3V0cHV0IiwicGFydHMiLCJwYXJzZUludCIsInRyaW0iLCJTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEs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QUNBLFlBQUlGLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBYSxJQUFiLElBQXFCM1MsSUFBSSxHQUFHLEVBQWhDLEVBQW9DO0FBQ2xDQSxVQUFBQSxJQUFJLElBQUksRUFBUjtBQUNELFNBRkQsTUFFTyxJQUFJMlMsS0FBSyxDQUFDLENBQUQsQ0FBTCxLQUFhLElBQWIsSUFBcUIzUyxJQUFJLEtBQUssRUFBbEMsRUFBc0M7QUFDM0NBLFVBQUFBLElBQUksSUFBSSxFQUFSO0FBQ0Q7O0FBRURBLFFBQUFBLElBQUksR0FBRzhTLE1BQU0sQ0FBQzlTLElBQUQsQ0FBYjtBQUNBMFMsUUFBQUEsTUFBTSxHQUFHLENBQUMxUyxJQUFJLENBQUNuRCxNQUFMLEtBQWdCLENBQWhCLEdBQW9CLEdBQXBCLEdBQTBCLEVBQTNCLElBQWlDbUQsSUFBakMsR0FBd0MsR0FBeEMsR0FBOENqRCxHQUF2RDtBQUNBOztBQUVGLFdBQUtxUixVQUFVLENBQUNFLElBQWhCO0FBQ0VvRSxRQUFBQSxNQUFNLEdBQUd4VyxNQUFNLENBQUMwVyxRQUFQLENBQWdCLE9BQU92QixJQUFQLENBQVlpQixPQUFaLEVBQXFCLENBQXJCLENBQWhCLEVBQXlDLEVBQXpDLENBQVQ7QUFDQTs7QUFFRixXQUFLbEUsVUFBVSxDQUFDSSxTQUFoQjtBQUNBLFdBQUtKLFVBQVUsQ0FBQ0csT0FBaEI7QUFDRW1FLFFBQUFBLE1BQU0sR0FBR3pKLEtBQUssQ0FBQ3FKLE9BQU8sQ0FBQzFILEtBQVIsQ0FBYyxDQUFkLEVBQWlCLENBQWpCLENBQUQsQ0FBZDtBQUNBO0FBaENKOztBQW1DQSxXQUFPOEgsTUFBUDtBQUNEOztBQUVELFNBQU9MLGlCQUFpQixDQUFDckUsTUFBTSxDQUFDK0UsV0FBUCxFQUFELENBQXhCO0FBQ0QsQ0ExWkQ7O0FBNFpBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ0WCxLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBrZyA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuXG5jb25zdCBsYXRlciA9IHtcbiAgdmVyc2lvbjogcGtnLnZlcnNpb25cbn07XG5cbmxhdGVyLmFycmF5ID0ge307XG5sYXRlci5hcnJheS5zb3J0ID0gZnVuY3Rpb24gKGFycmF5LCB6ZXJvSXNMYXN0KSB7XG4gIGFycmF5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gTnVtYmVyKGEpIC0gTnVtYmVyKGIpO1xuICB9KTtcbiAgaWYgKHplcm9Jc0xhc3QgJiYgYXJyYXlbMF0gPT09IDApIHtcbiAgICBhcnJheS5wdXNoKGFycmF5LnNoaWZ0KCkpO1xuICB9XG59O1xuXG5sYXRlci5hcnJheS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlLCB2YWx1ZXMsIGV4dGVudCkge1xuICBsZXQgY3VyO1xuICBjb25zdCB6ZXJvSXNMYXJnZXN0ID0gZXh0ZW50WzBdICE9PSAwO1xuICBsZXQgbmV4dElkeCA9IDA7XG4gIGZvciAobGV0IGkgPSB2YWx1ZXMubGVuZ3RoIC0gMTsgaSA+IC0xOyAtLWkpIHtcbiAgICBjdXIgPSB2YWx1ZXNbaV07XG4gICAgaWYgKGN1ciA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBjdXI7XG4gICAgfVxuXG4gICAgaWYgKGN1ciA+IHZhbHVlIHx8IChjdXIgPT09IDAgJiYgemVyb0lzTGFyZ2VzdCAmJiBleHRlbnRbMV0gPiB2YWx1ZSkpIHtcbiAgICAgIG5leHRJZHggPSBpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gdmFsdWVzW25leHRJZHhdO1xufTtcblxubGF0ZXIuYXJyYXkubmV4dEludmFsaWQgPSBmdW5jdGlvbiAodmFsdWUsIHZhbHVlcywgZXh0ZW50KSB7XG4gIGNvbnN0IG1pbiA9IGV4dGVudFswXTtcbiAgY29uc3QgbWF4ID0gZXh0ZW50WzFdO1xuICBjb25zdCB7IGxlbmd0aCB9ID0gdmFsdWVzO1xuICBjb25zdCB6ZXJvVmFsdWUgPSB2YWx1ZXNbbGVuZ3RoIC0gMV0gPT09IDAgJiYgbWluICE9PSAwID8gbWF4IDogMDtcbiAgbGV0IG5leHQgPSB2YWx1ZTtcbiAgbGV0IGkgPSB2YWx1ZXMuaW5kZXhPZih2YWx1ZSk7XG4gIGNvbnN0IHN0YXJ0ID0gbmV4dDtcbiAgd2hpbGUgKG5leHQgPT09ICh2YWx1ZXNbaV0gfHwgemVyb1ZhbHVlKSkge1xuICAgIG5leHQrKztcbiAgICBpZiAobmV4dCA+IG1heCkge1xuICAgICAgbmV4dCA9IG1pbjtcbiAgICB9XG5cbiAgICBpKys7XG4gICAgaWYgKGkgPT09IGxlbmd0aCkge1xuICAgICAgaSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKG5leHQgPT09IHN0YXJ0KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXh0O1xufTtcblxubGF0ZXIuYXJyYXkucHJldiA9IGZ1bmN0aW9uICh2YWx1ZSwgdmFsdWVzLCBleHRlbnQpIHtcbiAgbGV0IGN1cjtcbiAgY29uc3QgeyBsZW5ndGggfSA9IHZhbHVlcztcbiAgY29uc3QgemVyb0lzTGFyZ2VzdCA9IGV4dGVudFswXSAhPT0gMDtcbiAgbGV0IHByZXZpb3VzSWR4ID0gbGVuZ3RoIC0gMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGN1ciA9IHZhbHVlc1tpXTtcbiAgICBpZiAoY3VyID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGN1cjtcbiAgICB9XG5cbiAgICBpZiAoY3VyIDwgdmFsdWUgfHwgKGN1ciA9PT0gMCAmJiB6ZXJvSXNMYXJnZXN0ICYmIGV4dGVudFsxXSA8IHZhbHVlKSkge1xuICAgICAgcHJldmlvdXNJZHggPSBpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gdmFsdWVzW3ByZXZpb3VzSWR4XTtcbn07XG5cbmxhdGVyLmFycmF5LnByZXZJbnZhbGlkID0gZnVuY3Rpb24gKHZhbHVlLCB2YWx1ZXMsIGV4dGVudCkge1xuICBjb25zdCBtaW4gPSBleHRlbnRbMF07XG4gIGNvbnN0IG1heCA9IGV4dGVudFsxXTtcbiAgY29uc3QgeyBsZW5ndGggfSA9IHZhbHVlcztcbiAgY29uc3QgemVyb1ZhbHVlID0gdmFsdWVzW2xlbmd0aCAtIDFdID09PSAwICYmIG1pbiAhPT0gMCA/IG1heCA6IDA7XG4gIGxldCBuZXh0ID0gdmFsdWU7XG4gIGxldCBpID0gdmFsdWVzLmluZGV4T2YodmFsdWUpO1xuICBjb25zdCBzdGFydCA9IG5leHQ7XG4gIHdoaWxlIChuZXh0ID09PSAodmFsdWVzW2ldIHx8IHplcm9WYWx1ZSkpIHtcbiAgICBuZXh0LS07XG4gICAgaWYgKG5leHQgPCBtaW4pIHtcbiAgICAgIG5leHQgPSBtYXg7XG4gICAgfVxuXG4gICAgaS0tO1xuICAgIGlmIChpID09PSAtMSkge1xuICAgICAgaSA9IGxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgaWYgKG5leHQgPT09IHN0YXJ0KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXh0O1xufTtcblxubGF0ZXIuZGF5ID0gbGF0ZXIuRCA9IHtcbiAgbmFtZTogJ2RheScsXG4gIHJhbmdlOiA4NjQwMCxcbiAgdmFsKGQpIHtcbiAgICByZXR1cm4gZC5EIHx8IChkLkQgPSBsYXRlci5kYXRlLmdldERhdGUuY2FsbChkKSk7XG4gIH0sXG4gIGlzVmFsaWQoZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gbGF0ZXIuRC52YWwoZCkgPT09ICh2YWx1ZSB8fCBsYXRlci5ELmV4dGVudChkKVsxXSk7XG4gIH0sXG4gIGV4dGVudChkKSB7XG4gICAgaWYgKGQuREV4dGVudCkgcmV0dXJuIGQuREV4dGVudDtcbiAgICBjb25zdCBtb250aCA9IGxhdGVyLk0udmFsKGQpO1xuICAgIGxldCBtYXggPSBsYXRlci5EQVlTX0lOX01PTlRIW21vbnRoIC0gMV07XG4gICAgaWYgKG1vbnRoID09PSAyICYmIGxhdGVyLmR5LmV4dGVudChkKVsxXSA9PT0gMzY2KSB7XG4gICAgICBtYXggKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gKGQuREV4dGVudCA9IFsxLCBtYXhdKTtcbiAgfSxcbiAgc3RhcnQoZCkge1xuICAgIHJldHVybiAoXG4gICAgICBkLkRTdGFydCB8fFxuICAgICAgKGQuRFN0YXJ0ID0gbGF0ZXIuZGF0ZS5uZXh0KFxuICAgICAgICBsYXRlci5ZLnZhbChkKSxcbiAgICAgICAgbGF0ZXIuTS52YWwoZCksXG4gICAgICAgIGxhdGVyLkQudmFsKGQpXG4gICAgICApKVxuICAgICk7XG4gIH0sXG4gIGVuZChkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGQuREVuZCB8fFxuICAgICAgKGQuREVuZCA9IGxhdGVyLmRhdGUucHJldihsYXRlci5ZLnZhbChkKSwgbGF0ZXIuTS52YWwoZCksIGxhdGVyLkQudmFsKGQpKSlcbiAgICApO1xuICB9LFxuICBuZXh0KGQsIHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA+IGxhdGVyLkQuZXh0ZW50KGQpWzFdID8gMSA6IHZhbHVlO1xuICAgIGNvbnN0IG1vbnRoID0gbGF0ZXIuZGF0ZS5uZXh0Um9sbG92ZXIoZCwgdmFsdWUsIGxhdGVyLkQsIGxhdGVyLk0pO1xuICAgIGNvbnN0IERNYXggPSBsYXRlci5ELmV4dGVudChtb250aClbMV07XG4gICAgdmFsdWUgPSB2YWx1ZSA+IERNYXggPyAxIDogdmFsdWUgfHwgRE1heDtcbiAgICByZXR1cm4gbGF0ZXIuZGF0ZS5uZXh0KGxhdGVyLlkudmFsKG1vbnRoKSwgbGF0ZXIuTS52YWwobW9udGgpLCB2YWx1ZSk7XG4gIH0sXG4gIHByZXYoZCwgdmFsdWUpIHtcbiAgICBjb25zdCBtb250aCA9IGxhdGVyLmRhdGUucHJldlJvbGxvdmVyKGQsIHZhbHVlLCBsYXRlci5ELCBsYXRlci5NKTtcbiAgICBjb25zdCBETWF4ID0gbGF0ZXIuRC5leHRlbnQobW9udGgpWzFdO1xuICAgIHJldHVybiBsYXRlci5kYXRlLnByZXYoXG4gICAgICBsYXRlci5ZLnZhbChtb250aCksXG4gICAgICBsYXRlci5NLnZhbChtb250aCksXG4gICAgICB2YWx1ZSA+IERNYXggPyBETWF4IDogdmFsdWUgfHwgRE1heFxuICAgICk7XG4gIH1cbn07XG5sYXRlci5kYXlPZldlZWtDb3VudCA9IGxhdGVyLmRjID0ge1xuICBuYW1lOiAnZGF5IG9mIHdlZWsgY291bnQnLFxuICByYW5nZTogNjA0ODAwLFxuICB2YWwoZCkge1xuICAgIHJldHVybiBkLmRjIHx8IChkLmRjID0gTWF0aC5mbG9vcigobGF0ZXIuRC52YWwoZCkgLSAxKSAvIDcpICsgMSk7XG4gIH0sXG4gIGlzVmFsaWQoZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgbGF0ZXIuZGMudmFsKGQpID09PSB2YWx1ZSB8fFxuICAgICAgKHZhbHVlID09PSAwICYmIGxhdGVyLkQudmFsKGQpID4gbGF0ZXIuRC5leHRlbnQoZClbMV0gLSA3KVxuICAgICk7XG4gIH0sXG4gIGV4dGVudChkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGQuZGNFeHRlbnQgfHwgKGQuZGNFeHRlbnQgPSBbMSwgTWF0aC5jZWlsKGxhdGVyLkQuZXh0ZW50KGQpWzFdIC8gNyldKVxuICAgICk7XG4gIH0sXG4gIHN0YXJ0KGQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZC5kY1N0YXJ0IHx8XG4gICAgICAoZC5kY1N0YXJ0ID0gbGF0ZXIuZGF0ZS5uZXh0KFxuICAgICAgICBsYXRlci5ZLnZhbChkKSxcbiAgICAgICAgbGF0ZXIuTS52YWwoZCksXG4gICAgICAgIE1hdGgubWF4KDEsIChsYXRlci5kYy52YWwoZCkgLSAxKSAqIDcgKyAxIHx8IDEpXG4gICAgICApKVxuICAgICk7XG4gIH0sXG4gIGVuZChkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGQuZGNFbmQgfHxcbiAgICAgIChkLmRjRW5kID0gbGF0ZXIuZGF0ZS5wcmV2KFxuICAgICAgICBsYXRlci5ZLnZhbChkKSxcbiAgICAgICAgbGF0ZXIuTS52YWwoZCksXG4gICAgICAgIE1hdGgubWluKGxhdGVyLmRjLnZhbChkKSAqIDcsIGxhdGVyLkQuZXh0ZW50KGQpWzFdKVxuICAgICAgKSlcbiAgICApO1xuICB9LFxuICBuZXh0KGQsIHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA+IGxhdGVyLmRjLmV4dGVudChkKVsxXSA/IDEgOiB2YWx1ZTtcbiAgICBsZXQgbW9udGggPSBsYXRlci5kYXRlLm5leHRSb2xsb3ZlcihkLCB2YWx1ZSwgbGF0ZXIuZGMsIGxhdGVyLk0pO1xuICAgIGNvbnN0IGRjTWF4ID0gbGF0ZXIuZGMuZXh0ZW50KG1vbnRoKVsxXTtcbiAgICB2YWx1ZSA9IHZhbHVlID4gZGNNYXggPyAxIDogdmFsdWU7XG4gICAgY29uc3QgbmV4dCA9IGxhdGVyLmRhdGUubmV4dChcbiAgICAgIGxhdGVyLlkudmFsKG1vbnRoKSxcbiAgICAgIGxhdGVyLk0udmFsKG1vbnRoKSxcbiAgICAgIHZhbHVlID09PSAwID8gbGF0ZXIuRC5leHRlbnQobW9udGgpWzFdIC0gNiA6IDEgKyA3ICogKHZhbHVlIC0gMSlcbiAgICApO1xuICAgIGlmIChuZXh0LmdldFRpbWUoKSA8PSBkLmdldFRpbWUoKSkge1xuICAgICAgbW9udGggPSBsYXRlci5NLm5leHQoZCwgbGF0ZXIuTS52YWwoZCkgKyAxKTtcbiAgICAgIHJldHVybiBsYXRlci5kYXRlLm5leHQoXG4gICAgICAgIGxhdGVyLlkudmFsKG1vbnRoKSxcbiAgICAgICAgbGF0ZXIuTS52YWwobW9udGgpLFxuICAgICAgICB2YWx1ZSA9PT0gMCA/IGxhdGVyLkQuZXh0ZW50KG1vbnRoKVsxXSAtIDYgOiAxICsgNyAqICh2YWx1ZSAtIDEpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBwcmV2KGQsIHZhbHVlKSB7XG4gICAgY29uc3QgbW9udGggPSBsYXRlci5kYXRlLnByZXZSb2xsb3ZlcihkLCB2YWx1ZSwgbGF0ZXIuZGMsIGxhdGVyLk0pO1xuICAgIGNvbnN0IGRjTWF4ID0gbGF0ZXIuZGMuZXh0ZW50KG1vbnRoKVsxXTtcbiAgICB2YWx1ZSA9IHZhbHVlID4gZGNNYXggPyBkY01heCA6IHZhbHVlIHx8IGRjTWF4O1xuICAgIHJldHVybiBsYXRlci5kYy5lbmQoXG4gICAgICBsYXRlci5kYXRlLnByZXYoXG4gICAgICAgIGxhdGVyLlkudmFsKG1vbnRoKSxcbiAgICAgICAgbGF0ZXIuTS52YWwobW9udGgpLFxuICAgICAgICAxICsgNyAqICh2YWx1ZSAtIDEpXG4gICAgICApXG4gICAgKTtcbiAgfVxufTtcbmxhdGVyLmRheU9mV2VlayA9IGxhdGVyLmR3ID0gbGF0ZXIuZCA9IHtcbiAgbmFtZTogJ2RheSBvZiB3ZWVrJyxcbiAgcmFuZ2U6IDg2NDAwLFxuICB2YWwoZCkge1xuICAgIHJldHVybiBkLmR3IHx8IChkLmR3ID0gbGF0ZXIuZGF0ZS5nZXREYXkuY2FsbChkKSArIDEpO1xuICB9LFxuICBpc1ZhbGlkKGQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGxhdGVyLmR3LnZhbChkKSA9PT0gKHZhbHVlIHx8IDcpO1xuICB9LFxuICBleHRlbnQoKSB7XG4gICAgcmV0dXJuIFsxLCA3XTtcbiAgfSxcbiAgc3RhcnQoZCkge1xuICAgIHJldHVybiBsYXRlci5ELnN0YXJ0KGQpO1xuICB9LFxuICBlbmQoZCkge1xuICAgIHJldHVybiBsYXRlci5ELmVuZChkKTtcbiAgfSxcbiAgbmV4dChkLCB2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUgPiA3ID8gMSA6IHZhbHVlIHx8IDc7XG4gICAgcmV0dXJuIGxhdGVyLmRhdGUubmV4dChcbiAgICAgIGxhdGVyLlkudmFsKGQpLFxuICAgICAgbGF0ZXIuTS52YWwoZCksXG4gICAgICBsYXRlci5ELnZhbChkKSArXG4gICAgICAgICh2YWx1ZSAtIGxhdGVyLmR3LnZhbChkKSkgK1xuICAgICAgICAodmFsdWUgPD0gbGF0ZXIuZHcudmFsKGQpID8gNyA6IDApXG4gICAgKTtcbiAgfSxcbiAgcHJldihkLCB2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUgPiA3ID8gNyA6IHZhbHVlIHx8IDc7XG4gICAgcmV0dXJuIGxhdGVyLmRhdGUucHJldihcbiAgICAgIGxhdGVyLlkudmFsKGQpLFxuICAgICAgbGF0ZXIuTS52YWwoZCksXG4gICAgICBsYXRlci5ELnZhbChkKSArXG4gICAgICAgICh2YWx1ZSAtIGxhdGVyLmR3LnZhbChkKSkgK1xuICAgICAgICAodmFsdWUgPj0gbGF0ZXIuZHcudmFsKGQpID8gLTcgOiAwKVxuICAgICk7XG4gIH1cbn07XG5sYXRlci5kYXlPZlllYXIgPSBsYXRlci5keSA9IHtcbiAgbmFtZTogJ2RheSBvZiB5ZWFyJyxcbiAgcmFuZ2U6IDg2NDAwLFxuICB2YWwoZCkge1xuICAgIHJldHVybiAoXG4gICAgICBkLmR5IHx8XG4gICAgICAoZC5keSA9IE1hdGguY2VpbChcbiAgICAgICAgMSArXG4gICAgICAgICAgKGxhdGVyLkQuc3RhcnQoZCkuZ2V0VGltZSgpIC0gbGF0ZXIuWS5zdGFydChkKS5nZXRUaW1lKCkpIC8gbGF0ZXIuREFZXG4gICAgICApKVxuICAgICk7XG4gIH0sXG4gIGlzVmFsaWQoZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gbGF0ZXIuZHkudmFsKGQpID09PSAodmFsdWUgfHwgbGF0ZXIuZHkuZXh0ZW50KGQpWzFdKTtcbiAgfSxcbiAgZXh0ZW50KGQpIHtcbiAgICBjb25zdCB5ZWFyID0gbGF0ZXIuWS52YWwoZCk7XG4gICAgcmV0dXJuIGQuZHlFeHRlbnQgfHwgKGQuZHlFeHRlbnQgPSBbMSwgeWVhciAlIDQgPyAzNjUgOiAzNjZdKTtcbiAgfSxcbiAgc3RhcnQoZCkge1xuICAgIHJldHVybiBsYXRlci5ELnN0YXJ0KGQpO1xuICB9LFxuICBlbmQoZCkge1xuICAgIHJldHVybiBsYXRlci5ELmVuZChkKTtcbiAgfSxcbiAgbmV4dChkLCB2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUgPiBsYXRlci5keS5leHRlbnQoZClbMV0gPyAxIDogdmFsdWU7XG4gICAgY29uc3QgeWVhciA9IGxhdGVyLmRhdGUubmV4dFJvbGxvdmVyKGQsIHZhbHVlLCBsYXRlci5keSwgbGF0ZXIuWSk7XG4gICAgY29uc3QgZHlNYXggPSBsYXRlci5keS5leHRlbnQoeWVhcilbMV07XG4gICAgdmFsdWUgPSB2YWx1ZSA+IGR5TWF4ID8gMSA6IHZhbHVlIHx8IGR5TWF4O1xuICAgIHJldHVybiBsYXRlci5kYXRlLm5leHQobGF0ZXIuWS52YWwoeWVhciksIGxhdGVyLk0udmFsKHllYXIpLCB2YWx1ZSk7XG4gIH0sXG4gIHByZXYoZCwgdmFsdWUpIHtcbiAgICBjb25zdCB5ZWFyID0gbGF0ZXIuZGF0ZS5wcmV2Um9sbG92ZXIoZCwgdmFsdWUsIGxhdGVyLmR5LCBsYXRlci5ZKTtcbiAgICBjb25zdCBkeU1heCA9IGxhdGVyLmR5LmV4dGVudCh5ZWFyKVsxXTtcbiAgICB2YWx1ZSA9IHZhbHVlID4gZHlNYXggPyBkeU1heCA6IHZhbHVlIHx8IGR5TWF4O1xuICAgIHJldHVybiBsYXRlci5kYXRlLnByZXYobGF0ZXIuWS52YWwoeWVhciksIGxhdGVyLk0udmFsKHllYXIpLCB2YWx1ZSk7XG4gIH1cbn07XG5sYXRlci5ob3VyID0gbGF0ZXIuaCA9IHtcbiAgbmFtZTogJ2hvdXInLFxuICByYW5nZTogMzYwMCxcbiAgdmFsKGQpIHtcbiAgICByZXR1cm4gZC5oIHx8IChkLmggPSBsYXRlci5kYXRlLmdldEhvdXIuY2FsbChkKSk7XG4gIH0sXG4gIGlzVmFsaWQoZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gbGF0ZXIuaC52YWwoZCkgPT09IHZhbHVlO1xuICB9LFxuICBleHRlbnQoKSB7XG4gICAgcmV0dXJuIFswLCAyM107XG4gIH0sXG4gIHN0YXJ0KGQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZC5oU3RhcnQgfHxcbiAgICAgIChkLmhTdGFydCA9IGxhdGVyLmRhdGUubmV4dChcbiAgICAgICAgbGF0ZXIuWS52YWwoZCksXG4gICAgICAgIGxhdGVyLk0udmFsKGQpLFxuICAgICAgICBsYXRlci5ELnZhbChkKSxcbiAgICAgICAgbGF0ZXIuaC52YWwoZClcbiAgICAgICkpXG4gICAgKTtcbiAgfSxcbiAgZW5kKGQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZC5oRW5kIHx8XG4gICAgICAoZC5oRW5kID0gbGF0ZXIuZGF0ZS5wcmV2KFxuICAgICAgICBsYXRlci5ZLnZhbChkKSxcbiAgICAgICAgbGF0ZXIuTS52YWwoZCksXG4gICAgICAgIGxhdGVyLkQudmFsKGQpLFxuICAgICAgICBsYXRlci5oLnZhbChkKVxuICAgICAgKSlcbiAgICApO1xuICB9LFxuICBuZXh0KGQsIHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA+IDIzID8gMCA6IHZhbHVlO1xuICAgIGxldCBuZXh0ID0gbGF0ZXIuZGF0ZS5uZXh0KFxuICAgICAgbGF0ZXIuWS52YWwoZCksXG4gICAgICBsYXRlci5NLnZhbChkKSxcbiAgICAgIGxhdGVyLkQudmFsKGQpICsgKHZhbHVlIDw9IGxhdGVyLmgudmFsKGQpID8gMSA6IDApLFxuICAgICAgdmFsdWVcbiAgICApO1xuICAgIGlmICghbGF0ZXIuZGF0ZS5pc1VUQyAmJiBuZXh0LmdldFRpbWUoKSA8PSBkLmdldFRpbWUoKSkge1xuICAgICAgbmV4dCA9IGxhdGVyLmRhdGUubmV4dChcbiAgICAgICAgbGF0ZXIuWS52YWwobmV4dCksXG4gICAgICAgIGxhdGVyLk0udmFsKG5leHQpLFxuICAgICAgICBsYXRlci5ELnZhbChuZXh0KSxcbiAgICAgICAgdmFsdWUgKyAxXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBwcmV2KGQsIHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA+IDIzID8gMjMgOiB2YWx1ZTtcbiAgICByZXR1cm4gbGF0ZXIuZGF0ZS5wcmV2KFxuICAgICAgbGF0ZXIuWS52YWwoZCksXG4gICAgICBsYXRlci5NLnZhbChkKSxcbiAgICAgIGxhdGVyLkQudmFsKGQpICsgKHZhbHVlID49IGxhdGVyLmgudmFsKGQpID8gLTEgOiAwKSxcbiAgICAgIHZhbHVlXG4gICAgKTtcbiAgfVxufTtcbmxhdGVyLm1pbnV0ZSA9IGxhdGVyLm0gPSB7XG4gIG5hbWU6ICdtaW51dGUnLFxuICByYW5nZTogNjAsXG4gIHZhbChkKSB7XG4gICAgcmV0dXJuIGQubSB8fCAoZC5tID0gbGF0ZXIuZGF0ZS5nZXRNaW4uY2FsbChkKSk7XG4gIH0sXG4gIGlzVmFsaWQoZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gbGF0ZXIubS52YWwoZCkgPT09IHZhbHVlO1xuICB9LFxuICBleHRlbnQoZCkge1xuICAgIHJldHVybiBbMCwgNTldO1xuICB9LFxuICBzdGFydChkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGQubVN0YXJ0IHx8XG4gICAgICAoZC5tU3RhcnQgPSBsYXRlci5kYXRlLm5leHQoXG4gICAgICAgIGxhdGVyLlkudmFsKGQpLFxuICAgICAgICBsYXRlci5NLnZhbChkKSxcbiAgICAgICAgbGF0ZXIuRC52YWwoZCksXG4gICAgICAgIGxhdGVyLmgudmFsKGQpLFxuICAgICAgICBsYXRlci5tLnZhbChkKVxuICAgICAgKSlcbiAgICApO1xuICB9LFxuICBlbmQoZCkge1xuICAgIHJldHVybiAoXG4gICAgICBkLm1FbmQgfHxcbiAgICAgIChkLm1FbmQgPSBsYXRlci5kYXRlLnByZXYoXG4gICAgICAgIGxhdGVyLlkudmFsKGQpLFxuICAgICAgICBsYXRlci5NLnZhbChkKSxcbiAgICAgICAgbGF0ZXIuRC52YWwoZCksXG4gICAgICAgIGxhdGVyLmgudmFsKGQpLFxuICAgICAgICBsYXRlci5tLnZhbChkKVxuICAgICAgKSlcbiAgICApO1xuICB9LFxuICBuZXh0KGQsIHZhbHVlKSB7XG4gICAgY29uc3QgbSA9IGxhdGVyLm0udmFsKGQpO1xuICAgIGNvbnN0IHMgPSBsYXRlci5zLnZhbChkKTtcbiAgICBjb25zdCBpbmMgPSB2YWx1ZSA+IDU5ID8gNjAgLSBtIDogdmFsdWUgPD0gbSA/IDYwIC0gbSArIHZhbHVlIDogdmFsdWUgLSBtO1xuICAgIGxldCBuZXh0ID0gbmV3IERhdGUoZC5nZXRUaW1lKCkgKyBpbmMgKiBsYXRlci5NSU4gLSBzICogbGF0ZXIuU0VDKTtcbiAgICBpZiAoIWxhdGVyLmRhdGUuaXNVVEMgJiYgbmV4dC5nZXRUaW1lKCkgPD0gZC5nZXRUaW1lKCkpIHtcbiAgICAgIG5leHQgPSBuZXcgRGF0ZShkLmdldFRpbWUoKSArIChpbmMgKyAxMjApICogbGF0ZXIuTUlOIC0gcyAqIGxhdGVyLlNFQyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIHByZXYoZCwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlID4gNTkgPyA1OSA6IHZhbHVlO1xuICAgIHJldHVybiBsYXRlci5kYXRlLnByZXYoXG4gICAgICBsYXRlci5ZLnZhbChkKSxcbiAgICAgIGxhdGVyLk0udmFsKGQpLFxuICAgICAgbGF0ZXIuRC52YWwoZCksXG4gICAgICBsYXRlci5oLnZhbChkKSArICh2YWx1ZSA+PSBsYXRlci5tLnZhbChkKSA/IC0xIDogMCksXG4gICAgICB2YWx1ZVxuICAgICk7XG4gIH1cbn07XG5sYXRlci5tb250aCA9IGxhdGVyLk0gPSB7XG4gIG5hbWU6ICdtb250aCcsXG4gIHJhbmdlOiAyNjI5NzQwLFxuICB2YWwoZCkge1xuICAgIHJldHVybiBkLk0gfHwgKGQuTSA9IGxhdGVyLmRhdGUuZ2V0TW9udGguY2FsbChkKSArIDEpO1xuICB9LFxuICBpc1ZhbGlkKGQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGxhdGVyLk0udmFsKGQpID09PSAodmFsdWUgfHwgMTIpO1xuICB9LFxuICBleHRlbnQoKSB7XG4gICAgcmV0dXJuIFsxLCAxMl07XG4gIH0sXG4gIHN0YXJ0KGQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZC5NU3RhcnQgfHwgKGQuTVN0YXJ0ID0gbGF0ZXIuZGF0ZS5uZXh0KGxhdGVyLlkudmFsKGQpLCBsYXRlci5NLnZhbChkKSkpXG4gICAgKTtcbiAgfSxcbiAgZW5kKGQpIHtcbiAgICByZXR1cm4gZC5NRW5kIHx8IChkLk1FbmQgPSBsYXRlci5kYXRlLnByZXYobGF0ZXIuWS52YWwoZCksIGxhdGVyLk0udmFsKGQpKSk7XG4gIH0sXG4gIG5leHQoZCwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlID4gMTIgPyAxIDogdmFsdWUgfHwgMTI7XG4gICAgcmV0dXJuIGxhdGVyLmRhdGUubmV4dChcbiAgICAgIGxhdGVyLlkudmFsKGQpICsgKHZhbHVlID4gbGF0ZXIuTS52YWwoZCkgPyAwIDogMSksXG4gICAgICB2YWx1ZVxuICAgICk7XG4gIH0sXG4gIHByZXYoZCwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlID4gMTIgPyAxMiA6IHZhbHVlIHx8IDEyO1xuICAgIHJldHVybiBsYXRlci5kYXRlLnByZXYoXG4gICAgICBsYXRlci5ZLnZhbChkKSAtICh2YWx1ZSA+PSBsYXRlci5NLnZhbChkKSA/IDEgOiAwKSxcbiAgICAgIHZhbHVlXG4gICAgKTtcbiAgfVxufTtcbmxhdGVyLnNlY29uZCA9IGxhdGVyLnMgPSB7XG4gIG5hbWU6ICdzZWNvbmQnLFxuICByYW5nZTogMSxcbiAgdmFsKGQpIHtcbiAgICByZXR1cm4gZC5zIHx8IChkLnMgPSBsYXRlci5kYXRlLmdldFNlYy5jYWxsKGQpKTtcbiAgfSxcbiAgaXNWYWxpZChkLCB2YWx1ZSkge1xuICAgIHJldHVybiBsYXRlci5zLnZhbChkKSA9PT0gdmFsdWU7XG4gIH0sXG4gIGV4dGVudCgpIHtcbiAgICByZXR1cm4gWzAsIDU5XTtcbiAgfSxcbiAgc3RhcnQoZCkge1xuICAgIHJldHVybiBkO1xuICB9LFxuICBlbmQoZCkge1xuICAgIHJldHVybiBkO1xuICB9LFxuICBuZXh0KGQsIHZhbHVlKSB7XG4gICAgY29uc3QgcyA9IGxhdGVyLnMudmFsKGQpO1xuICAgIGNvbnN0IGluYyA9IHZhbHVlID4gNTkgPyA2MCAtIHMgOiB2YWx1ZSA8PSBzID8gNjAgLSBzICsgdmFsdWUgOiB2YWx1ZSAtIHM7XG4gICAgbGV0IG5leHQgPSBuZXcgRGF0ZShkLmdldFRpbWUoKSArIGluYyAqIGxhdGVyLlNFQyk7XG4gICAgaWYgKCFsYXRlci5kYXRlLmlzVVRDICYmIG5leHQuZ2V0VGltZSgpIDw9IGQuZ2V0VGltZSgpKSB7XG4gICAgICBuZXh0ID0gbmV3IERhdGUoZC5nZXRUaW1lKCkgKyAoaW5jICsgNzIwMCkgKiBsYXRlci5TRUMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBwcmV2KGQsIHZhbHVlLCBjYWNoZSkge1xuICAgIHZhbHVlID0gdmFsdWUgPiA1OSA/IDU5IDogdmFsdWU7XG4gICAgcmV0dXJuIGxhdGVyLmRhdGUucHJldihcbiAgICAgIGxhdGVyLlkudmFsKGQpLFxuICAgICAgbGF0ZXIuTS52YWwoZCksXG4gICAgICBsYXRlci5ELnZhbChkKSxcbiAgICAgIGxhdGVyLmgudmFsKGQpLFxuICAgICAgbGF0ZXIubS52YWwoZCkgKyAodmFsdWUgPj0gbGF0ZXIucy52YWwoZCkgPyAtMSA6IDApLFxuICAgICAgdmFsdWVcbiAgICApO1xuICB9XG59O1xubGF0ZXIudGltZSA9IGxhdGVyLnQgPSB7XG4gIG5hbWU6ICd0aW1lJyxcbiAgcmFuZ2U6IDEsXG4gIHZhbChkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGQudCB8fFxuICAgICAgKGQudCA9IGxhdGVyLmgudmFsKGQpICogMzYwMCArIGxhdGVyLm0udmFsKGQpICogNjAgKyBsYXRlci5zLnZhbChkKSlcbiAgICApO1xuICB9LFxuICBpc1ZhbGlkKGQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGxhdGVyLnQudmFsKGQpID09PSB2YWx1ZTtcbiAgfSxcbiAgZXh0ZW50KCkge1xuICAgIHJldHVybiBbMCwgODYzOTldO1xuICB9LFxuICBzdGFydChkKSB7XG4gICAgcmV0dXJuIGQ7XG4gIH0sXG4gIGVuZChkKSB7XG4gICAgcmV0dXJuIGQ7XG4gIH0sXG4gIG5leHQoZCwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlID4gODYzOTkgPyAwIDogdmFsdWU7XG4gICAgbGV0IG5leHQgPSBsYXRlci5kYXRlLm5leHQoXG4gICAgICBsYXRlci5ZLnZhbChkKSxcbiAgICAgIGxhdGVyLk0udmFsKGQpLFxuICAgICAgbGF0ZXIuRC52YWwoZCkgKyAodmFsdWUgPD0gbGF0ZXIudC52YWwoZCkgPyAxIDogMCksXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIHZhbHVlXG4gICAgKTtcbiAgICBpZiAoIWxhdGVyLmRhdGUuaXNVVEMgJiYgbmV4dC5nZXRUaW1lKCkgPCBkLmdldFRpbWUoKSkge1xuICAgICAgbmV4dCA9IGxhdGVyLmRhdGUubmV4dChcbiAgICAgICAgbGF0ZXIuWS52YWwobmV4dCksXG4gICAgICAgIGxhdGVyLk0udmFsKG5leHQpLFxuICAgICAgICBsYXRlci5ELnZhbChuZXh0KSxcbiAgICAgICAgbGF0ZXIuaC52YWwobmV4dCksXG4gICAgICAgIGxhdGVyLm0udmFsKG5leHQpLFxuICAgICAgICB2YWx1ZSArIDcyMDBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIHByZXYoZCwgdmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlID4gODYzOTkgPyA4NjM5OSA6IHZhbHVlO1xuICAgIHJldHVybiBsYXRlci5kYXRlLm5leHQoXG4gICAgICBsYXRlci5ZLnZhbChkKSxcbiAgICAgIGxhdGVyLk0udmFsKGQpLFxuICAgICAgbGF0ZXIuRC52YWwoZCkgKyAodmFsdWUgPj0gbGF0ZXIudC52YWwoZCkgPyAtMSA6IDApLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICB2YWx1ZVxuICAgICk7XG4gIH1cbn07XG5sYXRlci53ZWVrT2ZNb250aCA9IGxhdGVyLndtID0ge1xuICBuYW1lOiAnd2VlayBvZiBtb250aCcsXG4gIHJhbmdlOiA2MDQ4MDAsXG4gIHZhbChkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGQud20gfHxcbiAgICAgIChkLndtID1cbiAgICAgICAgKGxhdGVyLkQudmFsKGQpICtcbiAgICAgICAgICAobGF0ZXIuZHcudmFsKGxhdGVyLk0uc3RhcnQoZCkpIC0gMSkgK1xuICAgICAgICAgICg3IC0gbGF0ZXIuZHcudmFsKGQpKSkgL1xuICAgICAgICA3KVxuICAgICk7XG4gIH0sXG4gIGlzVmFsaWQoZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gbGF0ZXIud20udmFsKGQpID09PSAodmFsdWUgfHwgbGF0ZXIud20uZXh0ZW50KGQpWzFdKTtcbiAgfSxcbiAgZXh0ZW50KGQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZC53bUV4dGVudCB8fFxuICAgICAgKGQud21FeHRlbnQgPSBbXG4gICAgICAgIDEsXG4gICAgICAgIChsYXRlci5ELmV4dGVudChkKVsxXSArXG4gICAgICAgICAgKGxhdGVyLmR3LnZhbChsYXRlci5NLnN0YXJ0KGQpKSAtIDEpICtcbiAgICAgICAgICAoNyAtIGxhdGVyLmR3LnZhbChsYXRlci5NLmVuZChkKSkpKSAvXG4gICAgICAgICAgN1xuICAgICAgXSlcbiAgICApO1xuICB9LFxuICBzdGFydChkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGQud21TdGFydCB8fFxuICAgICAgKGQud21TdGFydCA9IGxhdGVyLmRhdGUubmV4dChcbiAgICAgICAgbGF0ZXIuWS52YWwoZCksXG4gICAgICAgIGxhdGVyLk0udmFsKGQpLFxuICAgICAgICBNYXRoLm1heChsYXRlci5ELnZhbChkKSAtIGxhdGVyLmR3LnZhbChkKSArIDEsIDEpXG4gICAgICApKVxuICAgICk7XG4gIH0sXG4gIGVuZChkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGQud21FbmQgfHxcbiAgICAgIChkLndtRW5kID0gbGF0ZXIuZGF0ZS5wcmV2KFxuICAgICAgICBsYXRlci5ZLnZhbChkKSxcbiAgICAgICAgbGF0ZXIuTS52YWwoZCksXG4gICAgICAgIE1hdGgubWluKGxhdGVyLkQudmFsKGQpICsgKDcgLSBsYXRlci5kdy52YWwoZCkpLCBsYXRlci5ELmV4dGVudChkKVsxXSlcbiAgICAgICkpXG4gICAgKTtcbiAgfSxcbiAgbmV4dChkLCB2YWx1ZSkge1xuICAgIHZhbHVlID0gdmFsdWUgPiBsYXRlci53bS5leHRlbnQoZClbMV0gPyAxIDogdmFsdWU7XG4gICAgY29uc3QgbW9udGggPSBsYXRlci5kYXRlLm5leHRSb2xsb3ZlcihkLCB2YWx1ZSwgbGF0ZXIud20sIGxhdGVyLk0pO1xuICAgIGNvbnN0IHdtTWF4ID0gbGF0ZXIud20uZXh0ZW50KG1vbnRoKVsxXTtcbiAgICB2YWx1ZSA9IHZhbHVlID4gd21NYXggPyAxIDogdmFsdWUgfHwgd21NYXg7XG4gICAgcmV0dXJuIGxhdGVyLmRhdGUubmV4dChcbiAgICAgIGxhdGVyLlkudmFsKG1vbnRoKSxcbiAgICAgIGxhdGVyLk0udmFsKG1vbnRoKSxcbiAgICAgIE1hdGgubWF4KDEsICh2YWx1ZSAtIDEpICogNyAtIChsYXRlci5kdy52YWwobW9udGgpIC0gMikpXG4gICAgKTtcbiAgfSxcbiAgcHJldihkLCB2YWx1ZSkge1xuICAgIGNvbnN0IG1vbnRoID0gbGF0ZXIuZGF0ZS5wcmV2Um9sbG92ZXIoZCwgdmFsdWUsIGxhdGVyLndtLCBsYXRlci5NKTtcbiAgICBjb25zdCB3bU1heCA9IGxhdGVyLndtLmV4dGVudChtb250aClbMV07XG4gICAgdmFsdWUgPSB2YWx1ZSA+IHdtTWF4ID8gd21NYXggOiB2YWx1ZSB8fCB3bU1heDtcbiAgICByZXR1cm4gbGF0ZXIud20uZW5kKFxuICAgICAgbGF0ZXIuZGF0ZS5uZXh0KFxuICAgICAgICBsYXRlci5ZLnZhbChtb250aCksXG4gICAgICAgIGxhdGVyLk0udmFsKG1vbnRoKSxcbiAgICAgICAgTWF0aC5tYXgoMSwgKHZhbHVlIC0gMSkgKiA3IC0gKGxhdGVyLmR3LnZhbChtb250aCkgLSAyKSlcbiAgICAgIClcbiAgICApO1xuICB9XG59O1xubGF0ZXIud2Vla09mWWVhciA9IGxhdGVyLnd5ID0ge1xuICBuYW1lOiAnd2VlayBvZiB5ZWFyIChJU08pJyxcbiAgcmFuZ2U6IDYwNDgwMCxcbiAgdmFsKGQpIHtcbiAgICBpZiAoZC53eSkgcmV0dXJuIGQud3k7XG4gICAgY29uc3Qgd1RodXIgPSBsYXRlci5kdy5uZXh0KGxhdGVyLnd5LnN0YXJ0KGQpLCA1KTtcbiAgICBjb25zdCBZVGh1ciA9IGxhdGVyLmR3Lm5leHQobGF0ZXIuWS5wcmV2KHdUaHVyLCBsYXRlci5ZLnZhbCh3VGh1cikgLSAxKSwgNSk7XG4gICAgcmV0dXJuIChkLnd5ID1cbiAgICAgIDEgKyBNYXRoLmNlaWwoKHdUaHVyLmdldFRpbWUoKSAtIFlUaHVyLmdldFRpbWUoKSkgLyBsYXRlci5XRUVLKSk7XG4gIH0sXG4gIGlzVmFsaWQoZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gbGF0ZXIud3kudmFsKGQpID09PSAodmFsdWUgfHwgbGF0ZXIud3kuZXh0ZW50KGQpWzFdKTtcbiAgfSxcbiAgZXh0ZW50KGQpIHtcbiAgICBpZiAoZC53eUV4dGVudCkgcmV0dXJuIGQud3lFeHRlbnQ7XG4gICAgY29uc3QgeWVhciA9IGxhdGVyLmR3Lm5leHQobGF0ZXIud3kuc3RhcnQoZCksIDUpO1xuICAgIGNvbnN0IGR3Rmlyc3QgPSBsYXRlci5kdy52YWwobGF0ZXIuWS5zdGFydCh5ZWFyKSk7XG4gICAgY29uc3QgZHdMYXN0ID0gbGF0ZXIuZHcudmFsKGxhdGVyLlkuZW5kKHllYXIpKTtcbiAgICByZXR1cm4gKGQud3lFeHRlbnQgPSBbMSwgZHdGaXJzdCA9PT0gNSB8fCBkd0xhc3QgPT09IDUgPyA1MyA6IDUyXSk7XG4gIH0sXG4gIHN0YXJ0KGQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZC53eVN0YXJ0IHx8XG4gICAgICAoZC53eVN0YXJ0ID0gbGF0ZXIuZGF0ZS5uZXh0KFxuICAgICAgICBsYXRlci5ZLnZhbChkKSxcbiAgICAgICAgbGF0ZXIuTS52YWwoZCksXG4gICAgICAgIGxhdGVyLkQudmFsKGQpIC0gKGxhdGVyLmR3LnZhbChkKSA+IDEgPyBsYXRlci5kdy52YWwoZCkgLSAyIDogNilcbiAgICAgICkpXG4gICAgKTtcbiAgfSxcbiAgZW5kKGQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZC53eUVuZCB8fFxuICAgICAgKGQud3lFbmQgPSBsYXRlci5kYXRlLnByZXYoXG4gICAgICAgIGxhdGVyLlkudmFsKGQpLFxuICAgICAgICBsYXRlci5NLnZhbChkKSxcbiAgICAgICAgbGF0ZXIuRC52YWwoZCkgKyAobGF0ZXIuZHcudmFsKGQpID4gMSA/IDggLSBsYXRlci5kdy52YWwoZCkgOiAwKVxuICAgICAgKSlcbiAgICApO1xuICB9LFxuICBuZXh0KGQsIHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSA+IGxhdGVyLnd5LmV4dGVudChkKVsxXSA/IDEgOiB2YWx1ZTtcbiAgICBjb25zdCB3eVRodXIgPSBsYXRlci5kdy5uZXh0KGxhdGVyLnd5LnN0YXJ0KGQpLCA1KTtcbiAgICBsZXQgeWVhciA9IGxhdGVyLmRhdGUubmV4dFJvbGxvdmVyKHd5VGh1ciwgdmFsdWUsIGxhdGVyLnd5LCBsYXRlci5ZKTtcbiAgICBpZiAobGF0ZXIud3kudmFsKHllYXIpICE9PSAxKSB7XG4gICAgICB5ZWFyID0gbGF0ZXIuZHcubmV4dCh5ZWFyLCAyKTtcbiAgICB9XG5cbiAgICBjb25zdCB3eU1heCA9IGxhdGVyLnd5LmV4dGVudCh5ZWFyKVsxXTtcbiAgICBjb25zdCB3eVN0YXJ0ID0gbGF0ZXIud3kuc3RhcnQoeWVhcik7XG4gICAgdmFsdWUgPSB2YWx1ZSA+IHd5TWF4ID8gMSA6IHZhbHVlIHx8IHd5TWF4O1xuICAgIHJldHVybiBsYXRlci5kYXRlLm5leHQoXG4gICAgICBsYXRlci5ZLnZhbCh3eVN0YXJ0KSxcbiAgICAgIGxhdGVyLk0udmFsKHd5U3RhcnQpLFxuICAgICAgbGF0ZXIuRC52YWwod3lTdGFydCkgKyA3ICogKHZhbHVlIC0gMSlcbiAgICApO1xuICB9LFxuICBwcmV2KGQsIHZhbHVlKSB7XG4gICAgY29uc3Qgd3lUaHVyID0gbGF0ZXIuZHcubmV4dChsYXRlci53eS5zdGFydChkKSwgNSk7XG4gICAgbGV0IHllYXIgPSBsYXRlci5kYXRlLnByZXZSb2xsb3Zlcih3eVRodXIsIHZhbHVlLCBsYXRlci53eSwgbGF0ZXIuWSk7XG4gICAgaWYgKGxhdGVyLnd5LnZhbCh5ZWFyKSAhPT0gMSkge1xuICAgICAgeWVhciA9IGxhdGVyLmR3Lm5leHQoeWVhciwgMik7XG4gICAgfVxuXG4gICAgY29uc3Qgd3lNYXggPSBsYXRlci53eS5leHRlbnQoeWVhcilbMV07XG4gICAgY29uc3Qgd3lFbmQgPSBsYXRlci53eS5lbmQoeWVhcik7XG4gICAgdmFsdWUgPSB2YWx1ZSA+IHd5TWF4ID8gd3lNYXggOiB2YWx1ZSB8fCB3eU1heDtcbiAgICByZXR1cm4gbGF0ZXIud3kuZW5kKFxuICAgICAgbGF0ZXIuZGF0ZS5uZXh0KFxuICAgICAgICBsYXRlci5ZLnZhbCh3eUVuZCksXG4gICAgICAgIGxhdGVyLk0udmFsKHd5RW5kKSxcbiAgICAgICAgbGF0ZXIuRC52YWwod3lFbmQpICsgNyAqICh2YWx1ZSAtIDEpXG4gICAgICApXG4gICAgKTtcbiAgfVxufTtcbmxhdGVyLnllYXIgPSBsYXRlci5ZID0ge1xuICBuYW1lOiAneWVhcicsXG4gIHJhbmdlOiAzMTU1NjkwMCxcbiAgdmFsKGQpIHtcbiAgICByZXR1cm4gZC5ZIHx8IChkLlkgPSBsYXRlci5kYXRlLmdldFllYXIuY2FsbChkKSk7XG4gIH0sXG4gIGlzVmFsaWQoZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gbGF0ZXIuWS52YWwoZCkgPT09IHZhbHVlO1xuICB9LFxuICBleHRlbnQoKSB7XG4gICAgcmV0dXJuIFsxOTcwLCAyMDk5XTtcbiAgfSxcbiAgc3RhcnQoZCkge1xuICAgIHJldHVybiBkLllTdGFydCB8fCAoZC5ZU3RhcnQgPSBsYXRlci5kYXRlLm5leHQobGF0ZXIuWS52YWwoZCkpKTtcbiAgfSxcbiAgZW5kKGQpIHtcbiAgICByZXR1cm4gZC5ZRW5kIHx8IChkLllFbmQgPSBsYXRlci5kYXRlLnByZXYobGF0ZXIuWS52YWwoZCkpKTtcbiAgfSxcbiAgbmV4dChkLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA+IGxhdGVyLlkudmFsKGQpICYmIHZhbHVlIDw9IGxhdGVyLlkuZXh0ZW50KClbMV1cbiAgICAgID8gbGF0ZXIuZGF0ZS5uZXh0KHZhbHVlKVxuICAgICAgOiBsYXRlci5ORVZFUjtcbiAgfSxcbiAgcHJldihkLCB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA8IGxhdGVyLlkudmFsKGQpICYmIHZhbHVlID49IGxhdGVyLlkuZXh0ZW50KClbMF1cbiAgICAgID8gbGF0ZXIuZGF0ZS5wcmV2KHZhbHVlKVxuICAgICAgOiBsYXRlci5ORVZFUjtcbiAgfVxufTtcbmxhdGVyLmZ1bGxEYXRlID0gbGF0ZXIuZmQgPSB7XG4gIG5hbWU6ICdmdWxsIGRhdGUnLFxuICByYW5nZTogMSxcbiAgdmFsKGQpIHtcbiAgICByZXR1cm4gZC5mZCB8fCAoZC5mZCA9IGQuZ2V0VGltZSgpKTtcbiAgfSxcbiAgaXNWYWxpZChkLCB2YWx1ZSkge1xuICAgIHJldHVybiBsYXRlci5mZC52YWwoZCkgPT09IHZhbHVlO1xuICB9LFxuICBleHRlbnQoKSB7XG4gICAgcmV0dXJuIFswLCAzMjUwMzY4ZTddO1xuICB9LFxuICBzdGFydChkKSB7XG4gICAgcmV0dXJuIGQ7XG4gIH0sXG4gIGVuZChkKSB7XG4gICAgcmV0dXJuIGQ7XG4gIH0sXG4gIG5leHQoZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gbGF0ZXIuZmQudmFsKGQpIDwgdmFsdWUgPyBuZXcgRGF0ZSh2YWx1ZSkgOiBsYXRlci5ORVZFUjtcbiAgfSxcbiAgcHJldihkLCB2YWx1ZSkge1xuICAgIHJldHVybiBsYXRlci5mZC52YWwoZCkgPiB2YWx1ZSA/IG5ldyBEYXRlKHZhbHVlKSA6IGxhdGVyLk5FVkVSO1xuICB9XG59O1xubGF0ZXIubW9kaWZpZXIgPSB7fTtcbmxhdGVyLm1vZGlmaWVyLmFmdGVyID0gbGF0ZXIubW9kaWZpZXIuYSA9IGZ1bmN0aW9uIChjb25zdHJhaW50LCB2YWx1ZXMpIHtcbiAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbMF07XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ2FmdGVyICcgKyBjb25zdHJhaW50Lm5hbWUsXG4gICAgcmFuZ2U6IChjb25zdHJhaW50LmV4dGVudChuZXcgRGF0ZSgpKVsxXSAtIHZhbHVlKSAqIGNvbnN0cmFpbnQucmFuZ2UsXG4gICAgdmFsOiBjb25zdHJhaW50LnZhbCxcbiAgICBpc1ZhbGlkKGQsIHZhbHVlXykge1xuICAgICAgcmV0dXJuIHRoaXMudmFsKGQpID49IHZhbHVlO1xuICAgIH0sXG4gICAgZXh0ZW50OiBjb25zdHJhaW50LmV4dGVudCxcbiAgICBzdGFydDogY29uc3RyYWludC5zdGFydCxcbiAgICBlbmQ6IGNvbnN0cmFpbnQuZW5kLFxuICAgIG5leHQoc3RhcnREYXRlLCB2YWx1ZV8pIHtcbiAgICAgIGlmICh2YWx1ZV8gIT0gdmFsdWUpIHZhbHVlXyA9IGNvbnN0cmFpbnQuZXh0ZW50KHN0YXJ0RGF0ZSlbMF07XG4gICAgICByZXR1cm4gY29uc3RyYWludC5uZXh0KHN0YXJ0RGF0ZSwgdmFsdWVfKTtcbiAgICB9LFxuICAgIHByZXYoc3RhcnREYXRlLCB2YWx1ZV8pIHtcbiAgICAgIHZhbHVlXyA9IHZhbHVlXyA9PT0gdmFsdWUgPyBjb25zdHJhaW50LmV4dGVudChzdGFydERhdGUpWzFdIDogdmFsdWUgLSAxO1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbnQucHJldihzdGFydERhdGUsIHZhbHVlXyk7XG4gICAgfVxuICB9O1xufTtcblxubGF0ZXIubW9kaWZpZXIuYmVmb3JlID0gbGF0ZXIubW9kaWZpZXIuYiA9IGZ1bmN0aW9uIChjb25zdHJhaW50LCB2YWx1ZXMpIHtcbiAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbdmFsdWVzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdiZWZvcmUgJyArIGNvbnN0cmFpbnQubmFtZSxcbiAgICByYW5nZTogY29uc3RyYWludC5yYW5nZSAqICh2YWx1ZSAtIDEpLFxuICAgIHZhbDogY29uc3RyYWludC52YWwsXG4gICAgaXNWYWxpZChkLCB2YWx1ZV8pIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbChkKSA8IHZhbHVlO1xuICAgIH0sXG4gICAgZXh0ZW50OiBjb25zdHJhaW50LmV4dGVudCxcbiAgICBzdGFydDogY29uc3RyYWludC5zdGFydCxcbiAgICBlbmQ6IGNvbnN0cmFpbnQuZW5kLFxuICAgIG5leHQoc3RhcnREYXRlLCB2YWx1ZV8pIHtcbiAgICAgIHZhbHVlXyA9IHZhbHVlXyA9PT0gdmFsdWUgPyBjb25zdHJhaW50LmV4dGVudChzdGFydERhdGUpWzBdIDogdmFsdWU7XG4gICAgICByZXR1cm4gY29uc3RyYWludC5uZXh0KHN0YXJ0RGF0ZSwgdmFsdWVfKTtcbiAgICB9LFxuICAgIHByZXYoc3RhcnREYXRlLCB2YWx1ZV8pIHtcbiAgICAgIHZhbHVlXyA9IHZhbHVlXyA9PT0gdmFsdWUgPyB2YWx1ZSAtIDEgOiBjb25zdHJhaW50LmV4dGVudChzdGFydERhdGUpWzFdO1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbnQucHJldihzdGFydERhdGUsIHZhbHVlXyk7XG4gICAgfVxuICB9O1xufTtcblxubGF0ZXIuY29tcGlsZSA9IGZ1bmN0aW9uIChzY2hlZERlZikge1xuICBjb25zdCBjb25zdHJhaW50cyA9IFtdO1xuICBsZXQgY29uc3RyYWludHNMZW5ndGggPSAwO1xuICBsZXQgdGlja0NvbnN0cmFpbnQ7XG4gIGZvciAoY29uc3Qga2V5IGluIHNjaGVkRGVmKSB7XG4gICAgY29uc3QgbmFtZVBhcnRzID0ga2V5LnNwbGl0KCdfJyk7XG4gICAgY29uc3QgbmFtZSA9IG5hbWVQYXJ0c1swXTtcbiAgICBjb25zdCBtb2QgPSBuYW1lUGFydHNbMV07XG4gICAgY29uc3QgdmFscyA9IHNjaGVkRGVmW2tleV07XG4gICAgY29uc3QgY29uc3RyYWludCA9IG1vZFxuICAgICAgPyBsYXRlci5tb2RpZmllclttb2RdKGxhdGVyW25hbWVdLCB2YWxzKVxuICAgICAgOiBsYXRlcltuYW1lXTtcbiAgICBjb25zdHJhaW50cy5wdXNoKHtcbiAgICAgIGNvbnN0cmFpbnQsXG4gICAgICB2YWxzXG4gICAgfSk7XG4gICAgY29uc3RyYWludHNMZW5ndGgrKztcbiAgfVxuXG4gIGNvbnN0cmFpbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBjb25zdCByYSA9IGEuY29uc3RyYWludC5yYW5nZTtcbiAgICBjb25zdCByYiA9IGIuY29uc3RyYWludC5yYW5nZTtcbiAgICByZXR1cm4gcmIgPCByYSA/IC0xIDogcmIgPiByYSA/IDEgOiAwO1xuICB9KTtcbiAgdGlja0NvbnN0cmFpbnQgPSBjb25zdHJhaW50c1tjb25zdHJhaW50c0xlbmd0aCAtIDFdLmNvbnN0cmFpbnQ7XG4gIGZ1bmN0aW9uIGNvbXBhcmVGbihkaXIpIHtcbiAgICByZXR1cm4gZGlyID09PSAnbmV4dCdcbiAgICAgID8gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYS5nZXRUaW1lKCkgPiBiLmdldFRpbWUoKTtcbiAgICAgICAgfVxuICAgICAgOiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiBiLmdldFRpbWUoKSA+IGEuZ2V0VGltZSgpO1xuICAgICAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydChkaXIsIHN0YXJ0RGF0ZSkge1xuICAgICAgbGV0IG5leHQgPSBzdGFydERhdGU7XG4gICAgICBjb25zdCBuZXh0VmFsdWUgPSBsYXRlci5hcnJheVtkaXJdO1xuICAgICAgbGV0IG1heEF0dGVtcHRzID0gMWUzO1xuICAgICAgbGV0IGRvbmU7XG4gICAgICB3aGlsZSAobWF4QXR0ZW1wdHMtLSAmJiAhZG9uZSAmJiBuZXh0KSB7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnN0cmFpbnRzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCB7IGNvbnN0cmFpbnQgfSA9IGNvbnN0cmFpbnRzW2ldO1xuICAgICAgICAgIGNvbnN0IGN1clZhbHVlID0gY29uc3RyYWludC52YWwobmV4dCk7XG4gICAgICAgICAgY29uc3QgZXh0ZW50ID0gY29uc3RyYWludC5leHRlbnQobmV4dCk7XG4gICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBuZXh0VmFsdWUoY3VyVmFsdWUsIGNvbnN0cmFpbnRzW2ldLnZhbHMsIGV4dGVudCk7XG4gICAgICAgICAgaWYgKCFjb25zdHJhaW50LmlzVmFsaWQobmV4dCwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgICBuZXh0ID0gY29uc3RyYWludFtkaXJdKG5leHQsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobmV4dCAhPT0gbGF0ZXIuTkVWRVIpIHtcbiAgICAgICAgbmV4dCA9XG4gICAgICAgICAgZGlyID09PSAnbmV4dCdcbiAgICAgICAgICAgID8gdGlja0NvbnN0cmFpbnQuc3RhcnQobmV4dClcbiAgICAgICAgICAgIDogdGlja0NvbnN0cmFpbnQuZW5kKG5leHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIGVuZChkaXIsIHN0YXJ0RGF0ZSkge1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIGNvbnN0IG5leHRWYWx1ZSA9IGxhdGVyLmFycmF5W2RpciArICdJbnZhbGlkJ107XG4gICAgICBjb25zdCBjb21wYXJlID0gY29tcGFyZUZuKGRpcik7XG4gICAgICBmb3IgKGxldCBpID0gY29uc3RyYWludHNMZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCB7IGNvbnN0cmFpbnQgfSA9IGNvbnN0cmFpbnRzW2ldO1xuICAgICAgICBjb25zdCBjdXJWYWx1ZSA9IGNvbnN0cmFpbnQudmFsKHN0YXJ0RGF0ZSk7XG4gICAgICAgIGNvbnN0IGV4dGVudCA9IGNvbnN0cmFpbnQuZXh0ZW50KHN0YXJ0RGF0ZSk7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gbmV4dFZhbHVlKGN1clZhbHVlLCBjb25zdHJhaW50c1tpXS52YWxzLCBleHRlbnQpO1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXh0ID0gY29uc3RyYWludFtkaXJdKHN0YXJ0RGF0ZSwgbmV3VmFsdWUpO1xuICAgICAgICAgIGlmIChuZXh0ICYmICghcmVzdWx0IHx8IGNvbXBhcmUocmVzdWx0LCBuZXh0KSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICB0aWNrKGRpciwgZGF0ZSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKFxuICAgICAgICBkaXIgPT09ICduZXh0J1xuICAgICAgICAgID8gdGlja0NvbnN0cmFpbnQuZW5kKGRhdGUpLmdldFRpbWUoKSArIGxhdGVyLlNFQ1xuICAgICAgICAgIDogdGlja0NvbnN0cmFpbnQuc3RhcnQoZGF0ZSkuZ2V0VGltZSgpIC0gbGF0ZXIuU0VDXG4gICAgICApO1xuICAgIH0sXG4gICAgdGlja1N0YXJ0KGRhdGUpIHtcbiAgICAgIHJldHVybiB0aWNrQ29uc3RyYWludC5zdGFydChkYXRlKTtcbiAgICB9XG4gIH07XG59O1xuXG5sYXRlci5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzY2hlZCkge1xuICBpZiAoIXNjaGVkKSB0aHJvdyBuZXcgRXJyb3IoJ01pc3Npbmcgc2NoZWR1bGUgZGVmaW5pdGlvbi4nKTtcbiAgaWYgKCFzY2hlZC5zY2hlZHVsZXMpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdEZWZpbml0aW9uIG11c3QgaW5jbHVkZSBhdCBsZWFzdCBvbmUgc2NoZWR1bGUuJyk7XG4gIGNvbnN0IHNjaGVkdWxlcyA9IFtdO1xuICBjb25zdCBzY2hlZHVsZXNMZW5ndGggPSBzY2hlZC5zY2hlZHVsZXMubGVuZ3RoO1xuICBjb25zdCBleGNlcHRpb25zID0gW107XG4gIGNvbnN0IGV4Y2VwdGlvbnNMZW5ndGggPSBzY2hlZC5leGNlcHRpb25zID8gc2NoZWQuZXhjZXB0aW9ucy5sZW5ndGggOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNjaGVkdWxlc0xlbmd0aDsgaSsrKSB7XG4gICAgc2NoZWR1bGVzLnB1c2gobGF0ZXIuY29tcGlsZShzY2hlZC5zY2hlZHVsZXNbaV0pKTtcbiAgfVxuXG4gIGZvciAobGV0IGogPSAwOyBqIDwgZXhjZXB0aW9uc0xlbmd0aDsgaisrKSB7XG4gICAgZXhjZXB0aW9ucy5wdXNoKGxhdGVyLmNvbXBpbGUoc2NoZWQuZXhjZXB0aW9uc1tqXSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5zdGFuY2VzKGRpciwgY291bnQsIHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgaXNSYW5nZSkge1xuICAgIGNvbnN0IGNvbXBhcmUgPSBjb21wYXJlRm4oZGlyKTtcbiAgICBsZXQgbG9vcENvdW50ID0gY291bnQ7XG4gICAgbGV0IG1heEF0dGVtcHRzID0gMWUzO1xuICAgIGNvbnN0IHNjaGVkU3RhcnRzID0gW107XG4gICAgY29uc3QgZXhjZXB0U3RhcnRzID0gW107XG4gICAgbGV0IG5leHQ7XG4gICAgbGV0IGVuZDtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgY29uc3QgaXNGb3J3YXJkID0gZGlyID09PSAnbmV4dCc7XG4gICAgbGV0IGxhc3RSZXN1bHQ7XG4gICAgY29uc3QgclN0YXJ0ID0gaXNGb3J3YXJkID8gMCA6IDE7XG4gICAgY29uc3QgckVuZCA9IGlzRm9yd2FyZCA/IDEgOiAwO1xuICAgIHN0YXJ0RGF0ZSA9IHN0YXJ0RGF0ZSA/IG5ldyBEYXRlKHN0YXJ0RGF0ZSkgOiBuZXcgRGF0ZSgpO1xuICAgIGlmICghc3RhcnREYXRlIHx8ICFzdGFydERhdGUuZ2V0VGltZSgpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0YXJ0IGRhdGUuJyk7XG4gICAgc2V0TmV4dFN0YXJ0cyhkaXIsIHNjaGVkdWxlcywgc2NoZWRTdGFydHMsIHN0YXJ0RGF0ZSk7XG4gICAgc2V0UmFuZ2VTdGFydHMoZGlyLCBleGNlcHRpb25zLCBleGNlcHRTdGFydHMsIHN0YXJ0RGF0ZSk7XG4gICAgd2hpbGUgKFxuICAgICAgbWF4QXR0ZW1wdHMtLSAmJlxuICAgICAgbG9vcENvdW50ICYmXG4gICAgICAobmV4dCA9IGZpbmROZXh0KHNjaGVkU3RhcnRzLCBjb21wYXJlKSlcbiAgICApIHtcbiAgICAgIGlmIChlbmREYXRlICYmIGNvbXBhcmUobmV4dCwgZW5kRGF0ZSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChleGNlcHRpb25zTGVuZ3RoKSB7XG4gICAgICAgIHVwZGF0ZVJhbmdlU3RhcnRzKGRpciwgZXhjZXB0aW9ucywgZXhjZXB0U3RhcnRzLCBuZXh0KTtcbiAgICAgICAgaWYgKChlbmQgPSBjYWxjUmFuZ2VPdmVybGFwKGRpciwgZXhjZXB0U3RhcnRzLCBuZXh0KSkpIHtcbiAgICAgICAgICB1cGRhdGVOZXh0U3RhcnRzKGRpciwgc2NoZWR1bGVzLCBzY2hlZFN0YXJ0cywgZW5kKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNSYW5nZSkge1xuICAgICAgICBjb25zdCBtYXhFbmREYXRlID0gY2FsY01heEVuZERhdGUoZXhjZXB0U3RhcnRzLCBjb21wYXJlKTtcbiAgICAgICAgZW5kID0gY2FsY0VuZChkaXIsIHNjaGVkdWxlcywgc2NoZWRTdGFydHMsIG5leHQsIG1heEVuZERhdGUpO1xuICAgICAgICBjb25zdCByID0gaXNGb3J3YXJkXG4gICAgICAgICAgPyBbXG4gICAgICAgICAgICAgIG5ldyBEYXRlKE1hdGgubWF4KHN0YXJ0RGF0ZSwgbmV4dCkpLFxuICAgICAgICAgICAgICBlbmQgPyBuZXcgRGF0ZShlbmREYXRlID8gTWF0aC5taW4oZW5kLCBlbmREYXRlKSA6IGVuZCkgOiB1bmRlZmluZWRcbiAgICAgICAgICAgIF1cbiAgICAgICAgICA6IFtcbiAgICAgICAgICAgICAgZW5kXG4gICAgICAgICAgICAgICAgPyBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgZW5kRGF0ZVxuICAgICAgICAgICAgICAgICAgICAgID8gTWF0aC5tYXgoZW5kRGF0ZSwgZW5kLmdldFRpbWUoKSArIGxhdGVyLlNFQylcbiAgICAgICAgICAgICAgICAgICAgICA6IGVuZC5nZXRUaW1lKCkgKyBsYXRlci5TRUNcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgbmV3IERhdGUoTWF0aC5taW4oc3RhcnREYXRlLCBuZXh0LmdldFRpbWUoKSArIGxhdGVyLlNFQykpXG4gICAgICAgICAgICBdO1xuICAgICAgICBpZiAobGFzdFJlc3VsdCAmJiByW3JTdGFydF0uZ2V0VGltZSgpID09PSBsYXN0UmVzdWx0W3JFbmRdLmdldFRpbWUoKSkge1xuICAgICAgICAgIGxhc3RSZXN1bHRbckVuZF0gPSByW3JFbmRdO1xuICAgICAgICAgIGxvb3BDb3VudCsrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3RSZXN1bHQgPSByO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChsYXN0UmVzdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZW5kKSBicmVhaztcbiAgICAgICAgdXBkYXRlTmV4dFN0YXJ0cyhkaXIsIHNjaGVkdWxlcywgc2NoZWRTdGFydHMsIGVuZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRzLnB1c2goXG4gICAgICAgICAgaXNGb3J3YXJkXG4gICAgICAgICAgICA/IG5ldyBEYXRlKE1hdGgubWF4KHN0YXJ0RGF0ZSwgbmV4dCkpXG4gICAgICAgICAgICA6IGdldFN0YXJ0KHNjaGVkdWxlcywgc2NoZWRTdGFydHMsIG5leHQsIGVuZERhdGUpXG4gICAgICAgICk7XG4gICAgICAgIHRpY2tTdGFydHMoZGlyLCBzY2hlZHVsZXMsIHNjaGVkU3RhcnRzLCBuZXh0KTtcbiAgICAgIH1cblxuICAgICAgbG9vcENvdW50LS07XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDAsIHsgbGVuZ3RoIH0gPSByZXN1bHRzOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICByZXN1bHRzW2ldID1cbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHJlc3VsdCkgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgICAgICAgICA/IFtjbGVhbkRhdGUocmVzdWx0WzBdKSwgY2xlYW5EYXRlKHJlc3VsdFsxXSldXG4gICAgICAgICAgOiBjbGVhbkRhdGUocmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPT09IDBcbiAgICAgID8gbGF0ZXIuTkVWRVJcbiAgICAgIDogY291bnQgPT09IDFcbiAgICAgID8gcmVzdWx0c1swXVxuICAgICAgOiByZXN1bHRzO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW5EYXRlKGQpIHtcbiAgICBpZiAoZCBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKGQudmFsdWVPZigpKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKGQpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBzZXROZXh0U3RhcnRzKGRpciwgc2NoZWRBcnJheSwgc3RhcnRzQXJyYXksIHN0YXJ0RGF0ZSkge1xuICAgIGZvciAobGV0IGkgPSAwLCB7IGxlbmd0aCB9ID0gc2NoZWRBcnJheTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBzdGFydHNBcnJheVtpXSA9IHNjaGVkQXJyYXlbaV0uc3RhcnQoZGlyLCBzdGFydERhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZU5leHRTdGFydHMoZGlyLCBzY2hlZEFycmF5LCBzdGFydHNBcnJheSwgc3RhcnREYXRlKSB7XG4gICAgY29uc3QgY29tcGFyZSA9IGNvbXBhcmVGbihkaXIpO1xuICAgIGZvciAobGV0IGkgPSAwLCB7IGxlbmd0aCB9ID0gc2NoZWRBcnJheTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc3RhcnRzQXJyYXlbaV0gJiYgIWNvbXBhcmUoc3RhcnRzQXJyYXlbaV0sIHN0YXJ0RGF0ZSkpIHtcbiAgICAgICAgc3RhcnRzQXJyYXlbaV0gPSBzY2hlZEFycmF5W2ldLnN0YXJ0KGRpciwgc3RhcnREYXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRSYW5nZVN0YXJ0cyhkaXIsIHNjaGVkQXJyYXksIHJhbmdlc0FycmF5LCBzdGFydERhdGUpIHtcbiAgICBjb25zdCBjb21wYXJlID0gY29tcGFyZUZuKGRpcik7XG4gICAgZm9yIChsZXQgaSA9IDAsIHsgbGVuZ3RoIH0gPSBzY2hlZEFycmF5OyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG5leHRTdGFydCA9IHNjaGVkQXJyYXlbaV0uc3RhcnQoZGlyLCBzdGFydERhdGUpO1xuICAgICAgaWYgKCFuZXh0U3RhcnQpIHtcbiAgICAgICAgcmFuZ2VzQXJyYXlbaV0gPSBsYXRlci5ORVZFUjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmdlc0FycmF5W2ldID0gW25leHRTdGFydCwgc2NoZWRBcnJheVtpXS5lbmQoZGlyLCBuZXh0U3RhcnQpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVSYW5nZVN0YXJ0cyhkaXIsIHNjaGVkQXJyYXksIHJhbmdlc0FycmF5LCBzdGFydERhdGUpIHtcbiAgICBjb25zdCBjb21wYXJlID0gY29tcGFyZUZuKGRpcik7XG4gICAgZm9yIChsZXQgaSA9IDAsIHsgbGVuZ3RoIH0gPSBzY2hlZEFycmF5OyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyYW5nZXNBcnJheVtpXSAmJiAhY29tcGFyZShyYW5nZXNBcnJheVtpXVswXSwgc3RhcnREYXRlKSkge1xuICAgICAgICBjb25zdCBuZXh0U3RhcnQgPSBzY2hlZEFycmF5W2ldLnN0YXJ0KGRpciwgc3RhcnREYXRlKTtcbiAgICAgICAgaWYgKCFuZXh0U3RhcnQpIHtcbiAgICAgICAgICByYW5nZXNBcnJheVtpXSA9IGxhdGVyLk5FVkVSO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhbmdlc0FycmF5W2ldID0gW25leHRTdGFydCwgc2NoZWRBcnJheVtpXS5lbmQoZGlyLCBuZXh0U3RhcnQpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2tTdGFydHMoZGlyLCBzY2hlZEFycmF5LCBzdGFydHNBcnJheSwgc3RhcnREYXRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIHsgbGVuZ3RoIH0gPSBzY2hlZEFycmF5OyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzdGFydHNBcnJheVtpXSAmJiBzdGFydHNBcnJheVtpXS5nZXRUaW1lKCkgPT09IHN0YXJ0RGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgc3RhcnRzQXJyYXlbaV0gPSBzY2hlZEFycmF5W2ldLnN0YXJ0KFxuICAgICAgICAgIGRpcixcbiAgICAgICAgICBzY2hlZEFycmF5W2ldLnRpY2soZGlyLCBzdGFydERhdGUpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3RhcnQoc2NoZWRBcnJheSwgc3RhcnRzQXJyYXksIHN0YXJ0RGF0ZSwgbWluRW5kRGF0ZSkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgZm9yIChsZXQgaSA9IDAsIHsgbGVuZ3RoIH0gPSBzdGFydHNBcnJheTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc3RhcnRzQXJyYXlbaV0gJiYgc3RhcnRzQXJyYXlbaV0uZ2V0VGltZSgpID09PSBzdGFydERhdGUuZ2V0VGltZSgpKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gc2NoZWRBcnJheVtpXS50aWNrU3RhcnQoc3RhcnREYXRlKTtcbiAgICAgICAgaWYgKG1pbkVuZERhdGUgJiYgc3RhcnQgPCBtaW5FbmREYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG1pbkVuZERhdGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlc3VsdCB8fCBzdGFydCA+IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHN0YXJ0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGNSYW5nZU92ZXJsYXAoZGlyLCByYW5nZXNBcnJheSwgc3RhcnREYXRlKSB7XG4gICAgY29uc3QgY29tcGFyZSA9IGNvbXBhcmVGbihkaXIpO1xuICAgIGxldCByZXN1bHQ7XG4gICAgZm9yIChsZXQgaSA9IDAsIHsgbGVuZ3RoIH0gPSByYW5nZXNBcnJheTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCByYW5nZSA9IHJhbmdlc0FycmF5W2ldO1xuICAgICAgaWYgKFxuICAgICAgICByYW5nZSAmJlxuICAgICAgICAhY29tcGFyZShyYW5nZVswXSwgc3RhcnREYXRlKSAmJlxuICAgICAgICAoIXJhbmdlWzFdIHx8IGNvbXBhcmUocmFuZ2VbMV0sIHN0YXJ0RGF0ZSkpXG4gICAgICApIHtcbiAgICAgICAgaWYgKCFyZXN1bHQgfHwgY29tcGFyZShyYW5nZVsxXSwgcmVzdWx0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJhbmdlWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGNNYXhFbmREYXRlKGV4Y2VwdHNBcnJheSwgY29tcGFyZSkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgZm9yIChsZXQgaSA9IDAsIHsgbGVuZ3RoIH0gPSBleGNlcHRzQXJyYXk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGV4Y2VwdHNBcnJheVtpXSAmJiAoIXJlc3VsdCB8fCBjb21wYXJlKHJlc3VsdCwgZXhjZXB0c0FycmF5W2ldWzBdKSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZXhjZXB0c0FycmF5W2ldWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYWxjRW5kKGRpciwgc2NoZWRBcnJheSwgc3RhcnRzQXJyYXksIHN0YXJ0RGF0ZSwgbWF4RW5kRGF0ZSkge1xuICAgIGNvbnN0IGNvbXBhcmUgPSBjb21wYXJlRm4oZGlyKTtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGZvciAobGV0IGkgPSAwLCB7IGxlbmd0aCB9ID0gc2NoZWRBcnJheTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzdGFydCA9IHN0YXJ0c0FycmF5W2ldO1xuICAgICAgaWYgKHN0YXJ0ICYmIHN0YXJ0LmdldFRpbWUoKSA9PT0gc3RhcnREYXRlLmdldFRpbWUoKSkge1xuICAgICAgICBjb25zdCBlbmQgPSBzY2hlZEFycmF5W2ldLmVuZChkaXIsIHN0YXJ0KTtcbiAgICAgICAgaWYgKG1heEVuZERhdGUgJiYgKCFlbmQgfHwgY29tcGFyZShlbmQsIG1heEVuZERhdGUpKSkge1xuICAgICAgICAgIHJldHVybiBtYXhFbmREYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZXN1bHQgfHwgY29tcGFyZShlbmQsIHJlc3VsdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSBlbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcGFyZUZuKGRpcikge1xuICAgIHJldHVybiBkaXIgPT09ICduZXh0J1xuICAgICAgPyBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgIHJldHVybiAhYiB8fCBhLmdldFRpbWUoKSA+IGIuZ2V0VGltZSgpO1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuICFhIHx8IGIuZ2V0VGltZSgpID4gYS5nZXRUaW1lKCk7XG4gICAgICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kTmV4dChhcnJheSwgY29tcGFyZSkge1xuICAgIGxldCBuZXh0ID0gYXJyYXlbMF07XG4gICAgZm9yIChsZXQgaSA9IDEsIHsgbGVuZ3RoIH0gPSBhcnJheTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlbaV0gJiYgY29tcGFyZShuZXh0LCBhcnJheVtpXSkpIHtcbiAgICAgICAgbmV4dCA9IGFycmF5W2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXh0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc1ZhbGlkKGQpIHtcbiAgICAgIHJldHVybiBnZXRJbnN0YW5jZXMoJ25leHQnLCAxLCBkLCBkKSAhPT0gbGF0ZXIuTkVWRVI7XG4gICAgfSxcbiAgICBuZXh0KGNvdW50LCBzdGFydERhdGUsIGVuZERhdGUpIHtcbiAgICAgIHJldHVybiBnZXRJbnN0YW5jZXMoJ25leHQnLCBjb3VudCB8fCAxLCBzdGFydERhdGUsIGVuZERhdGUpO1xuICAgIH0sXG4gICAgcHJldihjb3VudCwgc3RhcnREYXRlLCBlbmREYXRlKSB7XG4gICAgICByZXR1cm4gZ2V0SW5zdGFuY2VzKCdwcmV2JywgY291bnQgfHwgMSwgc3RhcnREYXRlLCBlbmREYXRlKTtcbiAgICB9LFxuICAgIG5leHRSYW5nZShjb3VudCwgc3RhcnREYXRlLCBlbmREYXRlKSB7XG4gICAgICByZXR1cm4gZ2V0SW5zdGFuY2VzKCduZXh0JywgY291bnQgfHwgMSwgc3RhcnREYXRlLCBlbmREYXRlLCB0cnVlKTtcbiAgICB9LFxuICAgIHByZXZSYW5nZShjb3VudCwgc3RhcnREYXRlLCBlbmREYXRlKSB7XG4gICAgICByZXR1cm4gZ2V0SW5zdGFuY2VzKCdwcmV2JywgY291bnQgfHwgMSwgc3RhcnREYXRlLCBlbmREYXRlLCB0cnVlKTtcbiAgICB9XG4gIH07XG59O1xuXG5sYXRlci5zZXRUaW1lb3V0ID0gZnVuY3Rpb24gKGZuLCBzY2hlZCkge1xuICBjb25zdCBzID0gbGF0ZXIuc2NoZWR1bGUoc2NoZWQpO1xuICBsZXQgdDtcbiAgaWYgKGZuKSB7XG4gICAgc2NoZWR1bGVUaW1lb3V0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVRpbWVvdXQoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBuZXh0ID0gcy5uZXh0KDIsIG5vdyk7XG4gICAgaWYgKCFuZXh0WzBdKSB7XG4gICAgICB0ID0gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBkaWZmID0gbmV4dFswXS5nZXRUaW1lKCkgLSBub3c7XG4gICAgaWYgKGRpZmYgPCAxZTMpIHtcbiAgICAgIGRpZmYgPSBuZXh0WzFdID8gbmV4dFsxXS5nZXRUaW1lKCkgLSBub3cgOiAxZTM7XG4gICAgfVxuXG4gICAgaWYgKGRpZmYgPCAyMTQ3NDgzNjQ3KSB7XG4gICAgICB0ID0gc2V0VGltZW91dChmbiwgZGlmZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQgPSBzZXRUaW1lb3V0KHNjaGVkdWxlVGltZW91dCwgMjE0NzQ4MzY0Nyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0RvbmUoKSB7XG4gICAgICByZXR1cm4gIXQ7XG4gICAgfSxcbiAgICBjbGVhcigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0KTtcbiAgICB9XG4gIH07XG59O1xuXG5sYXRlci5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uIChmbiwgc2NoZWQpIHtcbiAgaWYgKCFmbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCB0ID0gbGF0ZXIuc2V0VGltZW91dChzY2hlZHVsZVRpbWVvdXQsIHNjaGVkKTtcbiAgbGV0IGRvbmUgPSB0LmlzRG9uZSgpO1xuICBmdW5jdGlvbiBzY2hlZHVsZVRpbWVvdXQoKSB7XG4gICAgaWYgKCFkb25lKSB7XG4gICAgICBmbigpO1xuICAgICAgdCA9IGxhdGVyLnNldFRpbWVvdXQoc2NoZWR1bGVUaW1lb3V0LCBzY2hlZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0RvbmUoKSB7XG4gICAgICByZXR1cm4gdC5pc0RvbmUoKTtcbiAgICB9LFxuICAgIGNsZWFyKCkge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB0LmNsZWFyKCk7XG4gICAgfVxuICB9O1xufTtcblxubGF0ZXIuZGF0ZSA9IHt9O1xubGF0ZXIuZGF0ZS50aW1lem9uZSA9IGZ1bmN0aW9uICh1c2VMb2NhbFRpbWUpIHtcbiAgbGF0ZXIuZGF0ZS5idWlsZCA9IHVzZUxvY2FsVGltZVxuICAgID8gZnVuY3Rpb24gKFksIE0sIEQsIGgsIG0sIHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKFksIE0sIEQsIGgsIG0sIHMpO1xuICAgICAgfVxuICAgIDogZnVuY3Rpb24gKFksIE0sIEQsIGgsIG0sIHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKFksIE0sIEQsIGgsIG0sIHMpKTtcbiAgICAgIH07XG5cbiAgY29uc3QgZ2V0ID0gdXNlTG9jYWxUaW1lID8gJ2dldCcgOiAnZ2V0VVRDJztcbiAgY29uc3QgZCA9IERhdGUucHJvdG90eXBlO1xuICBsYXRlci5kYXRlLmdldFllYXIgPSBkW2dldCArICdGdWxsWWVhciddO1xuICBsYXRlci5kYXRlLmdldE1vbnRoID0gZFtnZXQgKyAnTW9udGgnXTtcbiAgbGF0ZXIuZGF0ZS5nZXREYXRlID0gZFtnZXQgKyAnRGF0ZSddO1xuICBsYXRlci5kYXRlLmdldERheSA9IGRbZ2V0ICsgJ0RheSddO1xuICBsYXRlci5kYXRlLmdldEhvdXIgPSBkW2dldCArICdIb3VycyddO1xuICBsYXRlci5kYXRlLmdldE1pbiA9IGRbZ2V0ICsgJ01pbnV0ZXMnXTtcbiAgbGF0ZXIuZGF0ZS5nZXRTZWMgPSBkW2dldCArICdTZWNvbmRzJ107XG4gIGxhdGVyLmRhdGUuaXNVVEMgPSAhdXNlTG9jYWxUaW1lO1xufTtcblxubGF0ZXIuZGF0ZS5VVEMgPSBmdW5jdGlvbiAoKSB7XG4gIGxhdGVyLmRhdGUudGltZXpvbmUoZmFsc2UpO1xufTtcblxubGF0ZXIuZGF0ZS5sb2NhbFRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gIGxhdGVyLmRhdGUudGltZXpvbmUodHJ1ZSk7XG59O1xuXG5sYXRlci5kYXRlLlVUQygpO1xubGF0ZXIuU0VDID0gMWUzO1xubGF0ZXIuTUlOID0gbGF0ZXIuU0VDICogNjA7XG5sYXRlci5IT1VSID0gbGF0ZXIuTUlOICogNjA7XG5sYXRlci5EQVkgPSBsYXRlci5IT1VSICogMjQ7XG5sYXRlci5XRUVLID0gbGF0ZXIuREFZICogNztcbmxhdGVyLkRBWVNfSU5fTU9OVEggPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG5sYXRlci5ORVZFUiA9IDA7XG5sYXRlci5kYXRlLm5leHQgPSBmdW5jdGlvbiAoWSwgTSwgRCwgaCwgbSwgcykge1xuICByZXR1cm4gbGF0ZXIuZGF0ZS5idWlsZChcbiAgICBZLFxuICAgIE0gIT09IHVuZGVmaW5lZCA/IE0gLSAxIDogMCxcbiAgICBEICE9PSB1bmRlZmluZWQgPyBEIDogMSxcbiAgICBoIHx8IDAsXG4gICAgbSB8fCAwLFxuICAgIHMgfHwgMFxuICApO1xufTtcblxubGF0ZXIuZGF0ZS5uZXh0Um9sbG92ZXIgPSBmdW5jdGlvbiAoZCwgdmFsdWUsIGNvbnN0cmFpbnQsIHBlcmlvZCkge1xuICBjb25zdCBjdXIgPSBjb25zdHJhaW50LnZhbChkKTtcbiAgY29uc3QgbWF4ID0gY29uc3RyYWludC5leHRlbnQoZClbMV07XG4gIHJldHVybiAodmFsdWUgfHwgbWF4KSA8PSBjdXIgfHwgdmFsdWUgPiBtYXhcbiAgICA/IG5ldyBEYXRlKHBlcmlvZC5lbmQoZCkuZ2V0VGltZSgpICsgbGF0ZXIuU0VDKVxuICAgIDogcGVyaW9kLnN0YXJ0KGQpO1xufTtcblxubGF0ZXIuZGF0ZS5wcmV2ID0gZnVuY3Rpb24gKFksIE0sIEQsIGgsIG0sIHMpIHtcbiAgY29uc3QgeyBsZW5ndGggfSA9IGFyZ3VtZW50cztcbiAgTSA9IGxlbmd0aCA8IDIgPyAxMSA6IE0gLSAxO1xuICBEID0gbGVuZ3RoIDwgMyA/IGxhdGVyLkQuZXh0ZW50KGxhdGVyLmRhdGUubmV4dChZLCBNICsgMSkpWzFdIDogRDtcbiAgaCA9IGxlbmd0aCA8IDQgPyAyMyA6IGg7XG4gIG0gPSBsZW5ndGggPCA1ID8gNTkgOiBtO1xuICBzID0gbGVuZ3RoIDwgNiA/IDU5IDogcztcbiAgcmV0dXJuIGxhdGVyLmRhdGUuYnVpbGQoWSwgTSwgRCwgaCwgbSwgcyk7XG59O1xuXG5sYXRlci5kYXRlLnByZXZSb2xsb3ZlciA9IGZ1bmN0aW9uIChkLCB2YWx1ZSwgY29uc3RyYWludCwgcGVyaW9kKSB7XG4gIGNvbnN0IGN1ciA9IGNvbnN0cmFpbnQudmFsKGQpO1xuICByZXR1cm4gdmFsdWUgPj0gY3VyIHx8ICF2YWx1ZVxuICAgID8gcGVyaW9kLnN0YXJ0KHBlcmlvZC5wcmV2KGQsIHBlcmlvZC52YWwoZCkgLSAxKSlcbiAgICA6IHBlcmlvZC5zdGFydChkKTtcbn07XG5cbmxhdGVyLnBhcnNlID0ge307XG5sYXRlci5wYXJzZS5jcm9uID0gZnVuY3Rpb24gKGV4cHIsIGhhc1NlY29uZHMpIHtcbiAgY29uc3QgTkFNRVMgPSB7XG4gICAgSkFOOiAxLFxuICAgIEZFQjogMixcbiAgICBNQVI6IDMsXG4gICAgQVBSOiA0LFxuICAgIE1BWTogNSxcbiAgICBKVU46IDYsXG4gICAgSlVMOiA3LFxuICAgIEFVRzogOCxcbiAgICBTRVA6IDksXG4gICAgT0NUOiAxMCxcbiAgICBOT1Y6IDExLFxuICAgIERFQzogMTIsXG4gICAgU1VOOiAxLFxuICAgIE1PTjogMixcbiAgICBUVUU6IDMsXG4gICAgV0VEOiA0LFxuICAgIFRIVTogNSxcbiAgICBGUkk6IDYsXG4gICAgU0FUOiA3XG4gIH07XG4gIGNvbnN0IFJFUExBQ0VNRU5UUyA9IHtcbiAgICAnKiAqICogKiAqIConOiAnMC8xICogKiAqICogKicsXG4gICAgJ0BZRUFSTFknOiAnMCAwIDEgMSAqJyxcbiAgICAnQEFOTlVBTExZJzogJzAgMCAxIDEgKicsXG4gICAgJ0BNT05USExZJzogJzAgMCAxICogKicsXG4gICAgJ0BXRUVLTFknOiAnMCAwICogKiAwJyxcbiAgICAnQERBSUxZJzogJzAgMCAqICogKicsXG4gICAgJ0BIT1VSTFknOiAnMCAqICogKiAqJ1xuICB9O1xuICBjb25zdCBGSUVMRFMgPSB7XG4gICAgczogWzAsIDAsIDU5XSxcbiAgICBtOiBbMSwgMCwgNTldLFxuICAgIGg6IFsyLCAwLCAyM10sXG4gICAgRDogWzMsIDEsIDMxXSxcbiAgICBNOiBbNCwgMSwgMTJdLFxuICAgIFk6IFs2LCAxOTcwLCAyMDk5XSxcbiAgICBkOiBbNSwgMSwgNywgMV1cbiAgfTtcbiAgZnVuY3Rpb24gZ2V0VmFsdWUodmFsdWUsIG9mZnNldCwgbWF4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHZhbHVlKVxuICAgICAgPyBOQU1FU1t2YWx1ZV0gfHwgbnVsbFxuICAgICAgOiBNYXRoLm1pbihOdW1iZXIodmFsdWUpICsgKG9mZnNldCB8fCAwKSwgbWF4IHx8IDk5OTkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xvbmVTY2hlZHVsZShzY2hlZCkge1xuICAgIGNvbnN0IGNsb25lID0ge307XG4gICAgbGV0IGZpZWxkO1xuICAgIGZvciAoZmllbGQgaW4gc2NoZWQpIHtcbiAgICAgIGlmIChmaWVsZCAhPT0gJ2RjJyAmJiBmaWVsZCAhPT0gJ2QnKSB7XG4gICAgICAgIGNsb25lW2ZpZWxkXSA9IHNjaGVkW2ZpZWxkXS5zbGljZSgwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmU7XG4gIH1cblxuICBmdW5jdGlvbiBhZGQoc2NoZWQsIG5hbWUsIG1pbiwgbWF4LCBpbmMpIHtcbiAgICBsZXQgaSA9IG1pbjtcbiAgICBpZiAoIXNjaGVkW25hbWVdKSB7XG4gICAgICBzY2hlZFtuYW1lXSA9IFtdO1xuICAgIH1cblxuICAgIHdoaWxlIChpIDw9IG1heCkge1xuICAgICAgaWYgKCFzY2hlZFtuYW1lXS5pbmNsdWRlcyhpKSkge1xuICAgICAgICBzY2hlZFtuYW1lXS5wdXNoKGkpO1xuICAgICAgfVxuXG4gICAgICBpICs9IGluYyB8fCAxO1xuICAgIH1cblxuICAgIHNjaGVkW25hbWVdLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhIC0gYjtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEhhc2goc2NoZWR1bGVzLCBjdXJTY2hlZCwgdmFsdWUsIGhhc2gpIHtcbiAgICBpZiAoXG4gICAgICAoY3VyU2NoZWQuZCAmJiAhY3VyU2NoZWQuZGMpIHx8XG4gICAgICAoY3VyU2NoZWQuZGMgJiYgIWN1clNjaGVkLmRjLmluY2x1ZGVzKGhhc2gpKVxuICAgICkge1xuICAgICAgc2NoZWR1bGVzLnB1c2goY2xvbmVTY2hlZHVsZShjdXJTY2hlZCkpO1xuICAgICAgY3VyU2NoZWQgPSBzY2hlZHVsZXNbc2NoZWR1bGVzLmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIGFkZChjdXJTY2hlZCwgJ2QnLCB2YWx1ZSwgdmFsdWUpO1xuICAgIGFkZChjdXJTY2hlZCwgJ2RjJywgaGFzaCwgaGFzaCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRXZWVrZGF5KHMsIGN1clNjaGVkLCB2YWx1ZSkge1xuICAgIGNvbnN0IGV4Y2VwdDEgPSB7fTtcbiAgICBjb25zdCBleGNlcHQyID0ge307XG4gICAgaWYgKHZhbHVlID09PSAxKSB7XG4gICAgICBhZGQoY3VyU2NoZWQsICdEJywgMSwgMyk7XG4gICAgICBhZGQoY3VyU2NoZWQsICdkJywgTkFNRVMuTU9OLCBOQU1FUy5GUkkpO1xuICAgICAgYWRkKGV4Y2VwdDEsICdEJywgMiwgMik7XG4gICAgICBhZGQoZXhjZXB0MSwgJ2QnLCBOQU1FUy5UVUUsIE5BTUVTLkZSSSk7XG4gICAgICBhZGQoZXhjZXB0MiwgJ0QnLCAzLCAzKTtcbiAgICAgIGFkZChleGNlcHQyLCAnZCcsIE5BTUVTLlRVRSwgTkFNRVMuRlJJKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkKGN1clNjaGVkLCAnRCcsIHZhbHVlIC0gMSwgdmFsdWUgKyAxKTtcbiAgICAgIGFkZChjdXJTY2hlZCwgJ2QnLCBOQU1FUy5NT04sIE5BTUVTLkZSSSk7XG4gICAgICBhZGQoZXhjZXB0MSwgJ0QnLCB2YWx1ZSAtIDEsIHZhbHVlIC0gMSk7XG4gICAgICBhZGQoZXhjZXB0MSwgJ2QnLCBOQU1FUy5NT04sIE5BTUVTLlRIVSk7XG4gICAgICBhZGQoZXhjZXB0MiwgJ0QnLCB2YWx1ZSArIDEsIHZhbHVlICsgMSk7XG4gICAgICBhZGQoZXhjZXB0MiwgJ2QnLCBOQU1FUy5UVUUsIE5BTUVTLkZSSSk7XG4gICAgfVxuXG4gICAgcy5leGNlcHRpb25zLnB1c2goZXhjZXB0MSk7XG4gICAgcy5leGNlcHRpb25zLnB1c2goZXhjZXB0Mik7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRSYW5nZShpdGVtLCBjdXJTY2hlZCwgbmFtZSwgbWluLCBtYXgsIG9mZnNldCkge1xuICAgIGNvbnN0IGluY1NwbGl0ID0gaXRlbS5zcGxpdCgnLycpO1xuICAgIGNvbnN0IGluYyA9IE51bWJlcihpbmNTcGxpdFsxXSk7XG4gICAgY29uc3QgcmFuZ2UgPSBpbmNTcGxpdFswXTtcbiAgICBpZiAocmFuZ2UgIT09ICcqJyAmJiByYW5nZSAhPT0gJzAnKSB7XG4gICAgICBjb25zdCByYW5nZVNwbGl0ID0gcmFuZ2Uuc3BsaXQoJy0nKTtcbiAgICAgIG1pbiA9IGdldFZhbHVlKHJhbmdlU3BsaXRbMF0sIG9mZnNldCwgbWF4KTtcbiAgICAgIG1heCA9IGdldFZhbHVlKHJhbmdlU3BsaXRbMV0sIG9mZnNldCwgbWF4KSB8fCBtYXg7XG4gICAgfVxuXG4gICAgYWRkKGN1clNjaGVkLCBuYW1lLCBtaW4sIG1heCwgaW5jKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlKGl0ZW0sIHMsIG5hbWUsIG1pbiwgbWF4LCBvZmZzZXQpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgbGV0IHNwbGl0O1xuICAgIGNvbnN0IHsgc2NoZWR1bGVzIH0gPSBzO1xuICAgIGNvbnN0IGN1clNjaGVkID0gc2NoZWR1bGVzW3NjaGVkdWxlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAoaXRlbSA9PT0gJ0wnKSB7XG4gICAgICBpdGVtID0gbWluIC0gMTtcbiAgICB9XG5cbiAgICBpZiAoKHZhbHVlID0gZ2V0VmFsdWUoaXRlbSwgb2Zmc2V0LCBtYXgpKSAhPT0gbnVsbCkge1xuICAgICAgYWRkKGN1clNjaGVkLCBuYW1lLCB2YWx1ZSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAodmFsdWUgPSBnZXRWYWx1ZShpdGVtLnJlcGxhY2UoJ1cnLCAnJyksIG9mZnNldCwgbWF4KSkgIT09IG51bGxcbiAgICApIHtcbiAgICAgIGFkZFdlZWtkYXkocywgY3VyU2NoZWQsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKHZhbHVlID0gZ2V0VmFsdWUoaXRlbS5yZXBsYWNlKCdMJywgJycpLCBvZmZzZXQsIG1heCkpICE9PSBudWxsXG4gICAgKSB7XG4gICAgICBhZGRIYXNoKHNjaGVkdWxlcywgY3VyU2NoZWQsIHZhbHVlLCBtaW4gLSAxKTtcbiAgICB9IGVsc2UgaWYgKChzcGxpdCA9IGl0ZW0uc3BsaXQoJyMnKSkubGVuZ3RoID09PSAyKSB7XG4gICAgICB2YWx1ZSA9IGdldFZhbHVlKHNwbGl0WzBdLCBvZmZzZXQsIG1heCk7XG4gICAgICBhZGRIYXNoKHNjaGVkdWxlcywgY3VyU2NoZWQsIHZhbHVlLCBnZXRWYWx1ZShzcGxpdFsxXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZGRSYW5nZShpdGVtLCBjdXJTY2hlZCwgbmFtZSwgbWluLCBtYXgsIG9mZnNldCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNIYXNoKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS5pbmNsdWRlcygnIycpIHx8IGl0ZW0uaW5kZXhPZignTCcpID4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGl0ZW1Tb3J0ZXIoYSwgYikge1xuICAgIHJldHVybiBpc0hhc2goYSkgJiYgIWlzSGFzaChiKSA/IDEgOiBhIC0gYjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRXhwcihleHByKSB7XG4gICAgY29uc3Qgc2NoZWR1bGUgPSB7XG4gICAgICBzY2hlZHVsZXM6IFt7fV0sXG4gICAgICBleGNlcHRpb25zOiBbXVxuICAgIH07XG4gICAgY29uc3QgY29tcG9uZW50cyA9IGV4cHIucmVwbGFjZSgvKFxccykrL2csICcgJykuc3BsaXQoJyAnKTtcbiAgICBsZXQgZmllbGQ7XG4gICAgbGV0IGY7XG4gICAgbGV0IGNvbXBvbmVudDtcbiAgICBsZXQgaXRlbXM7XG4gICAgZm9yIChmaWVsZCBpbiBGSUVMRFMpIHtcbiAgICAgIGYgPSBGSUVMRFNbZmllbGRdO1xuICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50c1tmWzBdXTtcbiAgICAgIGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50ICE9PSAnKicgJiYgY29tcG9uZW50ICE9PSAnPycpIHtcbiAgICAgICAgaXRlbXMgPSBjb21wb25lbnQuc3BsaXQoJywnKS5zb3J0KGl0ZW1Tb3J0ZXIpO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgY29uc3QgeyBsZW5ndGggfSA9IGl0ZW1zO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBwYXJzZShpdGVtc1tpXSwgc2NoZWR1bGUsIGZpZWxkLCBmWzFdLCBmWzJdLCBmWzNdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzY2hlZHVsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXBhcmVFeHByKGV4cHIpIHtcbiAgICBjb25zdCBwcmVwYXJlZCA9IGV4cHIudG9VcHBlckNhc2UoKTtcbiAgICByZXR1cm4gUkVQTEFDRU1FTlRTW3ByZXBhcmVkXSB8fCBwcmVwYXJlZDtcbiAgfVxuXG4gIGNvbnN0IGUgPSBwcmVwYXJlRXhwcihleHByKTtcbiAgcmV0dXJuIHBhcnNlRXhwcihoYXNTZWNvbmRzID8gZSA6ICcwICcgKyBlKTtcbn07XG5cbmxhdGVyLnBhcnNlLnJlY3VyID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBzY2hlZHVsZXMgPSBbXTtcbiAgY29uc3QgZXhjZXB0aW9ucyA9IFtdO1xuICBsZXQgY3VyO1xuICBsZXQgY3VyQXJyYXkgPSBzY2hlZHVsZXM7XG4gIGxldCBjdXJOYW1lO1xuICBsZXQgdmFsdWVzO1xuICBsZXQgZXZlcnk7XG4gIGxldCBtb2RpZmllcjtcbiAgbGV0IGFwcGx5TWluO1xuICBsZXQgYXBwbHlNYXg7XG4gIGxldCBpO1xuICBsZXQgbGFzdDtcbiAgZnVuY3Rpb24gYWRkKG5hbWUsIG1pbiwgbWF4KSB7XG4gICAgbmFtZSA9IG1vZGlmaWVyID8gbmFtZSArICdfJyArIG1vZGlmaWVyIDogbmFtZTtcbiAgICBpZiAoIWN1cikge1xuICAgICAgY3VyQXJyYXkucHVzaCh7fSk7XG4gICAgICBjdXIgPSBjdXJBcnJheVswXTtcbiAgICB9XG5cbiAgICBpZiAoIWN1cltuYW1lXSkge1xuICAgICAgY3VyW25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY3VyTmFtZSA9IGN1cltuYW1lXTtcbiAgICBpZiAoZXZlcnkpIHtcbiAgICAgIHZhbHVlcyA9IFtdO1xuICAgICAgZm9yIChpID0gbWluOyBpIDw9IG1heDsgaSArPSBldmVyeSkge1xuICAgICAgICB2YWx1ZXMucHVzaChpKTtcbiAgICAgIH1cblxuICAgICAgbGFzdCA9IHtcbiAgICAgICAgbjogbmFtZSxcbiAgICAgICAgeDogZXZlcnksXG4gICAgICAgIGM6IGN1ck5hbWUubGVuZ3RoLFxuICAgICAgICBtOiBtYXhcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFsdWVzID0gYXBwbHlNaW4gPyBbbWluXSA6IGFwcGx5TWF4ID8gW21heF0gOiB2YWx1ZXM7XG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHZhbHVlcztcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgaWYgKCFjdXJOYW1lLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICBjdXJOYW1lLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlcyA9IGV2ZXJ5ID0gbW9kaWZpZXIgPSBhcHBseU1pbiA9IGFwcGx5TWF4ID0gMDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2NoZWR1bGVzLFxuICAgIGV4Y2VwdGlvbnMsXG4gICAgb24oKSB7XG4gICAgICB2YWx1ZXMgPSBBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSkgPyBhcmd1bWVudHNbMF0gOiBhcmd1bWVudHM7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGV2ZXJ5KHgpIHtcbiAgICAgIGV2ZXJ5ID0geCB8fCAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhZnRlcih4KSB7XG4gICAgICBtb2RpZmllciA9ICdhJztcbiAgICAgIHZhbHVlcyA9IFt4XTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYmVmb3JlKHgpIHtcbiAgICAgIG1vZGlmaWVyID0gJ2InO1xuICAgICAgdmFsdWVzID0gW3hdO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBmaXJzdCgpIHtcbiAgICAgIGFwcGx5TWluID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgbGFzdCgpIHtcbiAgICAgIGFwcGx5TWF4ID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgdGltZSgpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCB7IGxlbmd0aCB9ID0gdmFsdWVzOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3BsaXQgPSB2YWx1ZXNbaV0uc3BsaXQoJzonKTtcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA8IDMpIHNwbGl0LnB1c2goMCk7XG4gICAgICAgIHZhbHVlc1tpXSA9XG4gICAgICAgICAgTnVtYmVyKHNwbGl0WzBdKSAqIDM2MDAgKyBOdW1iZXIoc3BsaXRbMV0pICogNjAgKyBOdW1iZXIoc3BsaXRbMl0pO1xuICAgICAgfVxuXG4gICAgICBhZGQoJ3QnKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgc2Vjb25kKCkge1xuICAgICAgYWRkKCdzJywgMCwgNTkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBtaW51dGUoKSB7XG4gICAgICBhZGQoJ20nLCAwLCA1OSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGhvdXIoKSB7XG4gICAgICBhZGQoJ2gnLCAwLCAyMyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGRheU9mTW9udGgoKSB7XG4gICAgICBhZGQoJ0QnLCAxLCBhcHBseU1heCA/IDAgOiAzMSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGRheU9mV2VlaygpIHtcbiAgICAgIGFkZCgnZCcsIDEsIDcpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBvbldlZWtlbmQoKSB7XG4gICAgICB2YWx1ZXMgPSBbMSwgN107XG4gICAgICByZXR1cm4gdGhpcy5kYXlPZldlZWsoKTtcbiAgICB9LFxuICAgIG9uV2Vla2RheSgpIHtcbiAgICAgIHZhbHVlcyA9IFsyLCAzLCA0LCA1LCA2XTtcbiAgICAgIHJldHVybiB0aGlzLmRheU9mV2VlaygpO1xuICAgIH0sXG4gICAgZGF5T2ZXZWVrQ291bnQoKSB7XG4gICAgICBhZGQoJ2RjJywgMSwgYXBwbHlNYXggPyAwIDogNSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGRheU9mWWVhcigpIHtcbiAgICAgIGFkZCgnZHknLCAxLCBhcHBseU1heCA/IDAgOiAzNjYpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB3ZWVrT2ZNb250aCgpIHtcbiAgICAgIGFkZCgnd20nLCAxLCBhcHBseU1heCA/IDAgOiA1KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgd2Vla09mWWVhcigpIHtcbiAgICAgIGFkZCgnd3knLCAxLCBhcHBseU1heCA/IDAgOiA1Myk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIG1vbnRoKCkge1xuICAgICAgYWRkKCdNJywgMSwgMTIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB5ZWFyKCkge1xuICAgICAgYWRkKCdZJywgMTk3MCwgMjQ1MCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGZ1bGxEYXRlKCkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIHsgbGVuZ3RoIH0gPSB2YWx1ZXM7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZXNbaV0gPSB2YWx1ZXNbaV0uZ2V0VGltZSgpO1xuICAgICAgfVxuXG4gICAgICBhZGQoJ2ZkJyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGN1c3RvbU1vZGlmaWVyKGlkLCB2YWxzKSB7XG4gICAgICBjb25zdCBjdXN0b20gPSBsYXRlci5tb2RpZmllcltpZF07XG4gICAgICBpZiAoIWN1c3RvbSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDdXN0b20gbW9kaWZpZXIgJyArIGlkICsgJyBub3QgcmVjb2duaXplZCEnKTtcbiAgICAgIG1vZGlmaWVyID0gaWQ7XG4gICAgICB2YWx1ZXMgPSBBcnJheS5pc0FycmF5KGFyZ3VtZW50c1sxXSkgPyBhcmd1bWVudHNbMV0gOiBbYXJndW1lbnRzWzFdXTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgY3VzdG9tUGVyaW9kKGlkKSB7XG4gICAgICBjb25zdCBjdXN0b20gPSBsYXRlcltpZF07XG4gICAgICBpZiAoIWN1c3RvbSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDdXN0b20gdGltZSBwZXJpb2QgJyArIGlkICsgJyBub3QgcmVjb2duaXplZCEnKTtcbiAgICAgIGFkZChpZCwgY3VzdG9tLmV4dGVudChuZXcgRGF0ZSgpKVswXSwgY3VzdG9tLmV4dGVudChuZXcgRGF0ZSgpKVsxXSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0aW5nT24oc3RhcnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmJldHdlZW4oc3RhcnQsIGxhc3QubSk7XG4gICAgfSxcbiAgICBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICAgIGN1cltsYXN0Lm5dID0gY3VyW2xhc3Qubl0uc3BsaWNlKDAsIGxhc3QuYyk7XG4gICAgICBldmVyeSA9IGxhc3QueDtcbiAgICAgIGFkZChsYXN0Lm4sIHN0YXJ0LCBlbmQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhbmQoKSB7XG4gICAgICBjdXIgPSBjdXJBcnJheVtjdXJBcnJheS5wdXNoKHt9KSAtIDFdO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBleGNlcHQoKSB7XG4gICAgICBjdXJBcnJheSA9IGV4Y2VwdGlvbnM7XG4gICAgICBjdXIgPSBudWxsO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xufTtcblxubGF0ZXIucGFyc2UudGV4dCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgY29uc3QgeyByZWN1ciB9ID0gbGF0ZXIucGFyc2U7XG4gIGxldCBwb3MgPSAwO1xuICBsZXQgaW5wdXQgPSAnJztcbiAgbGV0IGVycm9yO1xuICBjb25zdCBUT0tFTlRZUEVTID0ge1xuICAgIGVvZjogL14kLyxcbiAgICByYW5rOiAvXigoXFxkKykoc3R8bmR8cmR8dGgpPylcXGIvLFxuICAgIHRpbWU6IC9eKCgoMD9bMS05XXwxWzAtMl0pOlswLTVdXFxkKFxccyk/KGFtfHBtKSl8KCgwP1xcZHwxXFxkfDJbMC0zXSk6WzAtNV1cXGQpKVxcYi8sXG4gICAgZGF5TmFtZTogL14oKHN1bnxtb258dHVlKHMpP3x3ZWQobmVzKT98dGh1KHIocyk/KT98ZnJpfHNhdCh1cik/KShkYXkpPylcXGIvLFxuICAgIG1vbnRoTmFtZTogL14oamFuKHVhcnkpP3xmZWIocnVhcnkpP3xtYSgocihjaCk/KT98eSl8YXByKGlsKT98anUobHl8bmUpfGF1Zyh1c3QpP3xvY3Qob2Jlcik/fChzZXB0fG5vdnxkZWMpKGVtYmVyKT8pXFxiLyxcbiAgICB5ZWFySW5kZXg6IC9eKFxcZHs0fSlcXGIvLFxuICAgIGV2ZXJ5OiAvXmV2ZXJ5XFxiLyxcbiAgICBhZnRlcjogL15hZnRlclxcYi8sXG4gICAgYmVmb3JlOiAvXmJlZm9yZVxcYi8sXG4gICAgc2Vjb25kOiAvXihzfHNlYyhvbmQpPyhzKT8pXFxiLyxcbiAgICBtaW51dGU6IC9eKG18bWluKHV0ZSk/KHMpPylcXGIvLFxuICAgIGhvdXI6IC9eKGh8aG91cihzKT8pXFxiLyxcbiAgICBkYXk6IC9eKGRheShzKT8oIG9mIHRoZSBtb250aCk/KVxcYi8sXG4gICAgZGF5SW5zdGFuY2U6IC9eZGF5IGluc3RhbmNlXFxiLyxcbiAgICBkYXlPZldlZWs6IC9eZGF5KHMpPyBvZiB0aGUgd2Vla1xcYi8sXG4gICAgZGF5T2ZZZWFyOiAvXmRheShzKT8gb2YgdGhlIHllYXJcXGIvLFxuICAgIHdlZWtPZlllYXI6IC9ed2VlayhzKT8oIG9mIHRoZSB5ZWFyKT9cXGIvLFxuICAgIHdlZWtPZk1vbnRoOiAvXndlZWsocyk/IG9mIHRoZSBtb250aFxcYi8sXG4gICAgd2Vla2RheTogL153ZWVrZGF5XFxiLyxcbiAgICB3ZWVrZW5kOiAvXndlZWtlbmRcXGIvLFxuICAgIG1vbnRoOiAvXm1vbnRoKHMpP1xcYi8sXG4gICAgeWVhcjogL155ZWFyKHMpP1xcYi8sXG4gICAgYmV0d2VlbjogL15iZXR3ZWVuICh0aGUpP1xcYi8sXG4gICAgc3RhcnQ6IC9eKHN0YXJ0KGluZyk/IChhdHxvbiggdGhlKT8pPylcXGIvLFxuICAgIGF0OiAvXihhdHxAKVxcYi8sXG4gICAgYW5kOiAvXigsfGFuZFxcYikvLFxuICAgIGV4Y2VwdDogL14oZXhjZXB0XFxiKS8sXG4gICAgYWxzbzogLyhhbHNvKVxcYi8sXG4gICAgZmlyc3Q6IC9eKGZpcnN0KVxcYi8sXG4gICAgbGFzdDogL15sYXN0XFxiLyxcbiAgICBpbjogL15pblxcYi8sXG4gICAgb2Y6IC9eb2ZcXGIvLFxuICAgIG9udGhlOiAvXm9uIHRoZVxcYi8sXG4gICAgb246IC9eb25cXGIvLFxuICAgIHRocm91Z2g6IC8oLXxeKHRvfHRocm91Z2gpXFxiKS9cbiAgfTtcbiAgY29uc3QgTkFNRVMgPSB7XG4gICAgamFuOiAxLFxuICAgIGZlYjogMixcbiAgICBtYXI6IDMsXG4gICAgYXByOiA0LFxuICAgIG1heTogNSxcbiAgICBqdW46IDYsXG4gICAganVsOiA3LFxuICAgIGF1ZzogOCxcbiAgICBzZXA6IDksXG4gICAgb2N0OiAxMCxcbiAgICBub3Y6IDExLFxuICAgIGRlYzogMTIsXG4gICAgc3VuOiAxLFxuICAgIG1vbjogMixcbiAgICB0dWU6IDMsXG4gICAgd2VkOiA0LFxuICAgIHRodTogNSxcbiAgICBmcmk6IDYsXG4gICAgc2F0OiA3LFxuICAgICcxc3QnOiAxLFxuICAgIGZpcjogMSxcbiAgICAnMm5kJzogMixcbiAgICBzZWM6IDIsXG4gICAgJzNyZCc6IDMsXG4gICAgdGhpOiAzLFxuICAgICc0dGgnOiA0LFxuICAgIGZvcjogNFxuICB9O1xuICBmdW5jdGlvbiB0KHN0YXJ0LCBlbmQsIHRleHQsIHR5cGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnRQb3M6IHN0YXJ0LFxuICAgICAgZW5kUG9zOiBlbmQsXG4gICAgICB0ZXh0LFxuICAgICAgdHlwZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwZWVrKGV4cGVjdGVkKSB7XG4gICAgY29uc3Qgc2NhblRva2VucyA9IEFycmF5LmlzQXJyYXkoZXhwZWN0ZWQpID8gZXhwZWN0ZWQgOiBbZXhwZWN0ZWRdO1xuICAgIGNvbnN0IHdoaXRlU3BhY2UgPSAvXFxzKy87XG4gICAgbGV0IHRva2VuO1xuICAgIGxldCBjdXJJbnB1dDtcbiAgICBsZXQgbTtcbiAgICBsZXQgc2NhblRva2VuO1xuICAgIGxldCBzdGFydDtcbiAgICBsZXQgbGVuZ3RoXztcbiAgICBzY2FuVG9rZW5zLnB1c2god2hpdGVTcGFjZSk7XG4gICAgc3RhcnQgPSBwb3M7XG4gICAgd2hpbGUgKCF0b2tlbiB8fCB0b2tlbi50eXBlID09PSB3aGl0ZVNwYWNlKSB7XG4gICAgICBsZW5ndGhfID0gLTE7XG4gICAgICBjdXJJbnB1dCA9IGlucHV0LnNsaWNlKE1hdGgubWF4KDAsIHN0YXJ0KSk7XG4gICAgICB0b2tlbiA9IHQoc3RhcnQsIHN0YXJ0LCBpbnB1dC5zcGxpdCh3aGl0ZVNwYWNlKVswXSk7XG4gICAgICB2YXIgaTtcbiAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBzY2FuVG9rZW5zO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNjYW5Ub2tlbiA9IHNjYW5Ub2tlbnNbaV07XG4gICAgICAgIG0gPSBzY2FuVG9rZW4uZXhlYyhjdXJJbnB1dCk7XG4gICAgICAgIGlmIChtICYmIG0uaW5kZXggPT09IDAgJiYgbVswXS5sZW5ndGggPiBsZW5ndGhfKSB7XG4gICAgICAgICAgbGVuZ3RoXyA9IG1bMF0ubGVuZ3RoO1xuICAgICAgICAgIHRva2VuID0gdChcbiAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgc3RhcnQgKyBsZW5ndGhfLFxuICAgICAgICAgICAgY3VySW5wdXQuc2xpY2UoMCwgTWF0aC5tYXgoMCwgbGVuZ3RoXykpLFxuICAgICAgICAgICAgc2NhblRva2VuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4udHlwZSA9PT0gd2hpdGVTcGFjZSkge1xuICAgICAgICBzdGFydCA9IHRva2VuLmVuZFBvcztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG9rZW47XG4gIH1cblxuICBmdW5jdGlvbiBzY2FuKGV4cGVjdGVkVG9rZW4pIHtcbiAgICBjb25zdCB0b2tlbiA9IHBlZWsoZXhwZWN0ZWRUb2tlbik7XG4gICAgcG9zID0gdG9rZW4uZW5kUG9zO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVGhyb3VnaEV4cHIodG9rZW5UeXBlKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBOdW1iZXIocGFyc2VUb2tlblZhbHVlKHRva2VuVHlwZSkpO1xuICAgIGNvbnN0IGVuZCA9IGNoZWNrQW5kUGFyc2UoVE9LRU5UWVBFUy50aHJvdWdoKVxuICAgICAgPyBOdW1iZXIocGFyc2VUb2tlblZhbHVlKHRva2VuVHlwZSkpXG4gICAgICA6IHN0YXJ0O1xuICAgIGNvbnN0IG51bXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgIG51bXMucHVzaChpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUmFuZ2VzKHRva2VuVHlwZSkge1xuICAgIGxldCBudW1zID0gcGFyc2VUaHJvdWdoRXhwcih0b2tlblR5cGUpO1xuICAgIHdoaWxlIChjaGVja0FuZFBhcnNlKFRPS0VOVFlQRVMuYW5kKSkge1xuICAgICAgbnVtcyA9IG51bXMuY29uY2F0KHBhcnNlVGhyb3VnaEV4cHIodG9rZW5UeXBlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bXM7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUV2ZXJ5KHIpIHtcbiAgICBsZXQgbnVtYmVyO1xuICAgIGxldCBwZXJpb2Q7XG4gICAgbGV0IHN0YXJ0O1xuICAgIGxldCBlbmQ7XG4gICAgaWYgKGNoZWNrQW5kUGFyc2UoVE9LRU5UWVBFUy53ZWVrZW5kKSkge1xuICAgICAgci5vbihOQU1FUy5zdW4sIE5BTUVTLnNhdCkuZGF5T2ZXZWVrKCk7XG4gICAgfSBlbHNlIGlmIChjaGVja0FuZFBhcnNlKFRPS0VOVFlQRVMud2Vla2RheSkpIHtcbiAgICAgIHIub24oTkFNRVMubW9uLCBOQU1FUy50dWUsIE5BTUVTLndlZCwgTkFNRVMudGh1LCBOQU1FUy5mcmkpLmRheU9mV2VlaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgPSBwYXJzZVRva2VuVmFsdWUoVE9LRU5UWVBFUy5yYW5rKTtcbiAgICAgIHIuZXZlcnkobnVtYmVyKTtcbiAgICAgIHBlcmlvZCA9IHBhcnNlVGltZVBlcmlvZChyKTtcbiAgICAgIGlmIChjaGVja0FuZFBhcnNlKFRPS0VOVFlQRVMuc3RhcnQpKSB7XG4gICAgICAgIG51bWJlciA9IHBhcnNlVG9rZW5WYWx1ZShUT0tFTlRZUEVTLnJhbmspO1xuICAgICAgICByLnN0YXJ0aW5nT24obnVtYmVyKTtcbiAgICAgICAgcGFyc2VUb2tlbihwZXJpb2QudHlwZSk7XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrQW5kUGFyc2UoVE9LRU5UWVBFUy5iZXR3ZWVuKSkge1xuICAgICAgICBzdGFydCA9IHBhcnNlVG9rZW5WYWx1ZShUT0tFTlRZUEVTLnJhbmspO1xuICAgICAgICBpZiAoY2hlY2tBbmRQYXJzZShUT0tFTlRZUEVTLmFuZCkpIHtcbiAgICAgICAgICBlbmQgPSBwYXJzZVRva2VuVmFsdWUoVE9LRU5UWVBFUy5yYW5rKTtcbiAgICAgICAgICByLmJldHdlZW4oc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU9uVGhlKHIpIHtcbiAgICBpZiAoY2hlY2tBbmRQYXJzZShUT0tFTlRZUEVTLmZpcnN0KSkge1xuICAgICAgci5maXJzdCgpO1xuICAgIH0gZWxzZSBpZiAoY2hlY2tBbmRQYXJzZShUT0tFTlRZUEVTLmxhc3QpKSB7XG4gICAgICByLmxhc3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgci5vbihwYXJzZVJhbmdlcyhUT0tFTlRZUEVTLnJhbmspKTtcbiAgICB9XG5cbiAgICBwYXJzZVRpbWVQZXJpb2Qocik7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNjaGVkdWxlRXhwcihzdHJpbmdfKSB7XG4gICAgcG9zID0gMDtcbiAgICBpbnB1dCA9IHN0cmluZ187XG4gICAgZXJyb3IgPSAtMTtcbiAgICBjb25zdCByID0gcmVjdXIoKTtcbiAgICB3aGlsZSAocG9zIDwgaW5wdXQubGVuZ3RoICYmIGVycm9yIDwgMCkge1xuICAgICAgY29uc3QgdG9rZW4gPSBwYXJzZVRva2VuKFtcbiAgICAgICAgVE9LRU5UWVBFUy5ldmVyeSxcbiAgICAgICAgVE9LRU5UWVBFUy5hZnRlcixcbiAgICAgICAgVE9LRU5UWVBFUy5iZWZvcmUsXG4gICAgICAgIFRPS0VOVFlQRVMub250aGUsXG4gICAgICAgIFRPS0VOVFlQRVMub24sXG4gICAgICAgIFRPS0VOVFlQRVMub2YsXG4gICAgICAgIFRPS0VOVFlQRVMuaW4sXG4gICAgICAgIFRPS0VOVFlQRVMuYXQsXG4gICAgICAgIFRPS0VOVFlQRVMuYW5kLFxuICAgICAgICBUT0tFTlRZUEVTLmV4Y2VwdCxcbiAgICAgICAgVE9LRU5UWVBFUy5hbHNvXG4gICAgICBdKTtcbiAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlIFRPS0VOVFlQRVMuZXZlcnk6XG4gICAgICAgICAgcGFyc2VFdmVyeShyKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFRPS0VOVFlQRVMuYWZ0ZXI6XG4gICAgICAgICAgaWYgKHBlZWsoVE9LRU5UWVBFUy50aW1lKS50eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHIuYWZ0ZXIocGFyc2VUb2tlblZhbHVlKFRPS0VOVFlQRVMudGltZSkpO1xuICAgICAgICAgICAgci50aW1lKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHIuYWZ0ZXIocGFyc2VUb2tlblZhbHVlKFRPS0VOVFlQRVMucmFuaykpO1xuICAgICAgICAgICAgcGFyc2VUaW1lUGVyaW9kKHIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVE9LRU5UWVBFUy5iZWZvcmU6XG4gICAgICAgICAgaWYgKHBlZWsoVE9LRU5UWVBFUy50aW1lKS50eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHIuYmVmb3JlKHBhcnNlVG9rZW5WYWx1ZShUT0tFTlRZUEVTLnRpbWUpKTtcbiAgICAgICAgICAgIHIudGltZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByLmJlZm9yZShwYXJzZVRva2VuVmFsdWUoVE9LRU5UWVBFUy5yYW5rKSk7XG4gICAgICAgICAgICBwYXJzZVRpbWVQZXJpb2Qocik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBUT0tFTlRZUEVTLm9udGhlOlxuICAgICAgICAgIHBhcnNlT25UaGUocik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBUT0tFTlRZUEVTLm9uOlxuICAgICAgICAgIHIub24ocGFyc2VSYW5nZXMoVE9LRU5UWVBFUy5kYXlOYW1lKSkuZGF5T2ZXZWVrKCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBUT0tFTlRZUEVTLm9mOlxuICAgICAgICAgIHIub24ocGFyc2VSYW5nZXMoVE9LRU5UWVBFUy5tb250aE5hbWUpKS5tb250aCgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVE9LRU5UWVBFUy5pbjpcbiAgICAgICAgICByLm9uKHBhcnNlUmFuZ2VzKFRPS0VOVFlQRVMueWVhckluZGV4KSkueWVhcigpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVE9LRU5UWVBFUy5hdDpcbiAgICAgICAgICByLm9uKHBhcnNlVG9rZW5WYWx1ZShUT0tFTlRZUEVTLnRpbWUpKS50aW1lKCk7XG4gICAgICAgICAgd2hpbGUgKGNoZWNrQW5kUGFyc2UoVE9LRU5UWVBFUy5hbmQpKSB7XG4gICAgICAgICAgICByLm9uKHBhcnNlVG9rZW5WYWx1ZShUT0tFTlRZUEVTLnRpbWUpKS50aW1lKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBUT0tFTlRZUEVTLmFuZDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFRPS0VOVFlQRVMuYWxzbzpcbiAgICAgICAgICByLmFuZCgpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgVE9LRU5UWVBFUy5leGNlcHQ6XG4gICAgICAgICAgci5leGNlcHQoKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGVycm9yID0gcG9zO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzY2hlZHVsZXM6IHIuc2NoZWR1bGVzLFxuICAgICAgZXhjZXB0aW9uczogci5leGNlcHRpb25zLFxuICAgICAgZXJyb3JcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VUaW1lUGVyaW9kKHIpIHtcbiAgICBjb25zdCB0aW1lUGVyaW9kID0gcGFyc2VUb2tlbihbXG4gICAgICBUT0tFTlRZUEVTLnNlY29uZCxcbiAgICAgIFRPS0VOVFlQRVMubWludXRlLFxuICAgICAgVE9LRU5UWVBFUy5ob3VyLFxuICAgICAgVE9LRU5UWVBFUy5kYXlPZlllYXIsXG4gICAgICBUT0tFTlRZUEVTLmRheU9mV2VlayxcbiAgICAgIFRPS0VOVFlQRVMuZGF5SW5zdGFuY2UsXG4gICAgICBUT0tFTlRZUEVTLmRheSxcbiAgICAgIFRPS0VOVFlQRVMubW9udGgsXG4gICAgICBUT0tFTlRZUEVTLnllYXIsXG4gICAgICBUT0tFTlRZUEVTLndlZWtPZk1vbnRoLFxuICAgICAgVE9LRU5UWVBFUy53ZWVrT2ZZZWFyXG4gICAgXSk7XG4gICAgc3dpdGNoICh0aW1lUGVyaW9kLnR5cGUpIHtcbiAgICAgIGNhc2UgVE9LRU5UWVBFUy5zZWNvbmQ6XG4gICAgICAgIHIuc2Vjb25kKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFRPS0VOVFlQRVMubWludXRlOlxuICAgICAgICByLm1pbnV0ZSgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBUT0tFTlRZUEVTLmhvdXI6XG4gICAgICAgIHIuaG91cigpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBUT0tFTlRZUEVTLmRheU9mWWVhcjpcbiAgICAgICAgci5kYXlPZlllYXIoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgVE9LRU5UWVBFUy5kYXlPZldlZWs6XG4gICAgICAgIHIuZGF5T2ZXZWVrKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFRPS0VOVFlQRVMuZGF5SW5zdGFuY2U6XG4gICAgICAgIHIuZGF5T2ZXZWVrQ291bnQoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgVE9LRU5UWVBFUy5kYXk6XG4gICAgICAgIHIuZGF5T2ZNb250aCgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBUT0tFTlRZUEVTLndlZWtPZk1vbnRoOlxuICAgICAgICByLndlZWtPZk1vbnRoKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFRPS0VOVFlQRVMud2Vla09mWWVhcjpcbiAgICAgICAgci53ZWVrT2ZZZWFyKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFRPS0VOVFlQRVMubW9udGg6XG4gICAgICAgIHIubW9udGgoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgVE9LRU5UWVBFUy55ZWFyOlxuICAgICAgICByLnllYXIoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVycm9yID0gcG9zO1xuICAgIH1cblxuICAgIHJldHVybiB0aW1lUGVyaW9kO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tBbmRQYXJzZSh0b2tlblR5cGUpIHtcbiAgICBjb25zdCBmb3VuZCA9IHBlZWsodG9rZW5UeXBlKS50eXBlID09PSB0b2tlblR5cGU7XG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICBzY2FuKHRva2VuVHlwZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvdW5kO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VUb2tlbih0b2tlblR5cGUpIHtcbiAgICBjb25zdCB0ID0gc2Nhbih0b2tlblR5cGUpO1xuICAgIGlmICh0LnR5cGUpIHtcbiAgICAgIHQudGV4dCA9IGNvbnZlcnRTdHJpbmcodC50ZXh0LCB0b2tlblR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvciA9IHBvcztcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVG9rZW5WYWx1ZSh0b2tlblR5cGUpIHtcbiAgICByZXR1cm4gcGFyc2VUb2tlbih0b2tlblR5cGUpLnRleHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0U3RyaW5nKHN0cmluZ18sIHRva2VuVHlwZSkge1xuICAgIGxldCBvdXRwdXQgPSBzdHJpbmdfO1xuICAgIHN3aXRjaCAodG9rZW5UeXBlKSB7XG4gICAgICBjYXNlIFRPS0VOVFlQRVMudGltZTpcbiAgICAgICAgLypcbiAgICAgICAgY29uc3QgcGFydHMgPSBzdHJpbmdfLnNwbGl0KC8oOnxhbXxwbSkvKTtcbiAgICAgICAgY29uc3QgaG91ciA9XG4gICAgICAgICAgcGFydHNbM10gPT09ICdwbScgJiYgcGFydHNbMF0gPCAxMlxuICAgICAgICAgICAgPyBOdW1iZXIucGFyc2VJbnQocGFydHNbMF0sIDEwKSArIDEyXG4gICAgICAgICAgICA6IHBhcnRzWzBdO1xuICAgICAgICBjb25zdCBtaW4gPSBwYXJ0c1syXS50cmltKCk7XG4gICAgICAgIG91dHB1dCA9IChob3VyLmxlbmd0aCA9PT0gMSA/ICcwJyA6ICcnKSArIGhvdXIgKyAnOicgKyBtaW47XG4gICAgICAgICovXG4gICAgICAgIC8vIDxodHRwczovL2dpdGh1Yi5jb20vYnVua2F0L2xhdGVyL3B1bGwvMTg4PlxuICAgICAgICBjb25zdCBwYXJ0cyA9IHN0cmluZ18uc3BsaXQoLyg6fGFtfHBtKS8pO1xuICAgICAgICBsZXQgaG91ciA9IE51bWJlci5wYXJzZUludChwYXJ0c1swXSwgMTApO1xuICAgICAgICBjb25zdCBtaW4gPSBwYXJ0c1syXS50cmltKCk7XG4gICAgICAgIGlmIChwYXJ0c1szXSA9PT0gJ3BtJyAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcnRzWzNdID09PSAnYW0nICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgaG91ciAtPSAxMjtcbiAgICAgICAgfVxuXG4gICAgICAgIGhvdXIgPSBTdHJpbmcoaG91cik7XG4gICAgICAgIG91dHB1dCA9IChob3VyLmxlbmd0aCA9PT0gMSA/ICcwJyA6ICcnKSArIGhvdXIgKyAnOicgKyBtaW47XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFRPS0VOVFlQRVMucmFuazpcbiAgICAgICAgb3V0cHV0ID0gTnVtYmVyLnBhcnNlSW50KC9eXFxkKy8uZXhlYyhzdHJpbmdfKVswXSwgMTApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBUT0tFTlRZUEVTLm1vbnRoTmFtZTpcbiAgICAgIGNhc2UgVE9LRU5UWVBFUy5kYXlOYW1lOlxuICAgICAgICBvdXRwdXQgPSBOQU1FU1tzdHJpbmdfLnNsaWNlKDAsIDMpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuXG4gIHJldHVybiBwYXJzZVNjaGVkdWxlRXhwcihzdHJpbmcudG9Mb3dlckNhc2UoKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxhdGVyO1xuIl19