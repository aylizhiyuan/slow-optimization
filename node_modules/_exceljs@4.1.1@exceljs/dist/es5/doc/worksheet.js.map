{"version":3,"sources":["../../../lib/doc/worksheet.js"],"names":["_","require","colCache","Range","Row","Column","Enums","Image","Table","DataValidations","Encryptor","Worksheet","options","id","orderNo","name","state","_rows","_columns","_keys","_merges","rowBreaks","_workbook","workbook","properties","Object","assign","defaultRowHeight","dyDescent","outlineLevelCol","outlineLevelRow","pageSetup","margins","left","right","top","bottom","header","footer","orientation","horizontalDpi","verticalDpi","fitToPage","fitToWidth","fitToHeight","scale","pageOrder","blackAndWhite","draft","cellComments","errors","paperSize","undefined","showRowColHeaders","showGridLines","firstPageNumber","horizontalCentered","verticalCentered","colBreaks","headerFooter","differentFirst","differentOddEven","oddHeader","oddFooter","evenHeader","evenFooter","firstHeader","firstFooter","dataValidations","views","autoFilter","_media","sheetProtection","tables","conditionalFormattings","removeWorksheetEx","key","value","f","each","c","col","l2n","length","n","push","start","count","rows","nRows","inserts","i","rowArguments","forEach","insert","row","getRow","splice","apply","r","nExpand","nKeep","nEnd","getColumn","defn","definedNames","spliceColumns","styleOption","rowNo","_nextRow","values","_setStyleOption","addRow","pos","spliceRows","findRow","_copyStyle","src","dest","rSrc","rDst","style","freeze","eachCell","includeEmpty","cell","colNumber","getCell","height","rowNum","Array","fill","iteratee","hasValues","number","address","getAddress","findCell","getCellEx","cells","dimensions","_mergeCellsInternal","ignoreStyle","merge","intersects","Error","master","j","unmerge","type","ValueType","Merge","_unMergeMaster","range","formula","results","shareType","decoded","decode","width","masterAddress","encodeAddress","isShared","getResult","isArray","first","ref","result","sharedFormula","imageId","model","filter","m","image","find","password","Promise","resolve","sheet","spinCount","Number","isFinite","Math","round","max","algorithmName","saltValue","randomBytes","toString","hashValue","convertPasswordToHash","table","cf","Function","rowModel","mergeCells","mergeCellsWithoutStyle","rowDims","expand","min","_headerRowCount","reduce","pv","cv","headerCount","headers","columns","column","maxCount","eachRow","cellCount","counts","_lastRowNumber","some","Boolean","console","trace","tabColor","media","map","medium","cols","toModel","merges","fromModel","_parseRows","_parseMergeCells","t","module","exports"],"mappings":"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","sourcesContent":["const _ = require('../utils/under-dash');\r\n\r\nconst colCache = require('../utils/col-cache');\r\nconst Range = require('./range');\r\nconst Row = require('./row');\r\nconst Column = require('./column');\r\nconst Enums = require('./enums');\r\nconst Image = require('./image');\r\nconst Table = require('./table');\r\nconst DataValidations = require('./data-validations');\r\nconst Encryptor = require('../utils/encryptor');\r\n\r\n// Worksheet requirements\r\n//  Operate as sheet inside workbook or standalone\r\n//  Load and Save from file and stream\r\n//  Access/Add/Delete individual cells\r\n//  Manage column widths and row heights\r\n\r\nclass Worksheet {\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    // in a workbook, each sheet will have a number\r\n    this.id = options.id;\r\n    this.orderNo = options.orderNo;\r\n\r\n    // and a name\r\n    this.name = options.name || `Sheet${this.id}`;\r\n\r\n    // add a state\r\n    this.state = options.state || 'visible';\r\n\r\n    // rows allows access organised by row. Sparse array of arrays indexed by row-1, col\r\n    // Note: _rows is zero based. Must subtract 1 to go from cell.row to index\r\n    this._rows = [];\r\n\r\n    // column definitions\r\n    this._columns = null;\r\n\r\n    // column keys (addRow convenience): key ==> this._collumns index\r\n    this._keys = {};\r\n\r\n    // keep record of all merges\r\n    this._merges = {};\r\n\r\n    // record of all row and column pageBreaks\r\n    this.rowBreaks = [];\r\n\r\n    this._workbook = options.workbook;\r\n\r\n    // for tabColor, default row height, outline levels, etc\r\n    this.properties = Object.assign(\r\n      {},\r\n      {\r\n        defaultRowHeight: 15,\r\n        dyDescent: 55,\r\n        outlineLevelCol: 0,\r\n        outlineLevelRow: 0,\r\n      },\r\n      options.properties\r\n    );\r\n\r\n    // for all things printing\r\n    this.pageSetup = Object.assign(\r\n      {},\r\n      {\r\n        margins: {left: 0.7, right: 0.7, top: 0.75, bottom: 0.75, header: 0.3, footer: 0.3},\r\n        orientation: 'portrait',\r\n        horizontalDpi: 4294967295,\r\n        verticalDpi: 4294967295,\r\n        fitToPage: !!(options.pageSetup && (options.pageSetup.fitToWidth || options.pageSetup.fitToHeight) && !options.pageSetup.scale),\r\n        pageOrder: 'downThenOver',\r\n        blackAndWhite: false,\r\n        draft: false,\r\n        cellComments: 'None',\r\n        errors: 'displayed',\r\n        scale: 100,\r\n        fitToWidth: 1,\r\n        fitToHeight: 1,\r\n        paperSize: undefined,\r\n        showRowColHeaders: false,\r\n        showGridLines: false,\r\n        firstPageNumber: undefined,\r\n        horizontalCentered: false,\r\n        verticalCentered: false,\r\n        rowBreaks: null,\r\n        colBreaks: null,\r\n      },\r\n      options.pageSetup\r\n    );\r\n\r\n    this.headerFooter = Object.assign(\r\n      {},\r\n      {\r\n        differentFirst: false,\r\n        differentOddEven: false,\r\n        oddHeader: null,\r\n        oddFooter: null,\r\n        evenHeader: null,\r\n        evenFooter: null,\r\n        firstHeader: null,\r\n        firstFooter: null,\r\n      },\r\n      options.headerFooter\r\n    );\r\n\r\n    this.dataValidations = new DataValidations();\r\n\r\n    // for freezepanes, split, zoom, gridlines, etc\r\n    this.views = options.views || [];\r\n\r\n    this.autoFilter = options.autoFilter || null;\r\n\r\n    // for images, etc\r\n    this._media = [];\r\n\r\n    // worksheet protection\r\n    this.sheetProtection = null;\r\n\r\n    // for tables\r\n    this.tables = {};\r\n\r\n    this.conditionalFormattings = [];\r\n  }\r\n\r\n  get workbook() {\r\n    return this._workbook;\r\n  }\r\n\r\n  // when you're done with this worksheet, call this to remove from workbook\r\n  destroy() {\r\n    this._workbook.removeWorksheetEx(this);\r\n  }\r\n\r\n  // Get the bounding range of the cells in this worksheet\r\n  get dimensions() {\r\n    const dimensions = new Range();\r\n    this._rows.forEach(row => {\r\n      if (row) {\r\n        const rowDims = row.dimensions;\r\n        if (rowDims) {\r\n          dimensions.expand(row.number, rowDims.min, row.number, rowDims.max);\r\n        }\r\n      }\r\n    });\r\n    return dimensions;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Columns\r\n\r\n  // get the current columns array.\r\n  get columns() {\r\n    return this._columns;\r\n  }\r\n\r\n  // set the columns from an array of column definitions.\r\n  // Note: any headers defined will overwrite existing values.\r\n  set columns(value) {\r\n    // calculate max header row count\r\n    this._headerRowCount = value.reduce((pv, cv) => {\r\n      const headerCount = (cv.header && 1) || (cv.headers && cv.headers.length) || 0;\r\n      return Math.max(pv, headerCount);\r\n    }, 0);\r\n\r\n    // construct Column objects\r\n    let count = 1;\r\n    const columns = (this._columns = []);\r\n    value.forEach(defn => {\r\n      const column = new Column(this, count++, false);\r\n      columns.push(column);\r\n      column.defn = defn;\r\n    });\r\n  }\r\n\r\n  getColumnKey(key) {\r\n    return this._keys[key];\r\n  }\r\n\r\n  setColumnKey(key, value) {\r\n    this._keys[key] = value;\r\n  }\r\n\r\n  deleteColumnKey(key) {\r\n    delete this._keys[key];\r\n  }\r\n\r\n  eachColumnKey(f) {\r\n    _.each(this._keys, f);\r\n  }\r\n\r\n  // get a single column by col number. If it doesn't exist, create it and any gaps before it\r\n  getColumn(c) {\r\n    if (typeof c === 'string') {\r\n      // if it matches a key'd column, return that\r\n      const col = this._keys[c];\r\n      if (col) return col;\r\n\r\n      // otherwise, assume letter\r\n      c = colCache.l2n(c);\r\n    }\r\n    if (!this._columns) {\r\n      this._columns = [];\r\n    }\r\n    if (c > this._columns.length) {\r\n      let n = this._columns.length + 1;\r\n      while (n <= c) {\r\n        this._columns.push(new Column(this, n++));\r\n      }\r\n    }\r\n    return this._columns[c - 1];\r\n  }\r\n\r\n  spliceColumns(start, count, ...inserts) {\r\n    const rows = this._rows;\r\n    const nRows = rows.length;\r\n    if (inserts.length > 0) {\r\n      // must iterate over all rows whether they exist yet or not\r\n      for (let i = 0; i < nRows; i++) {\r\n        const rowArguments = [start, count];\r\n        // eslint-disable-next-line no-loop-func\r\n        inserts.forEach(insert => {\r\n          rowArguments.push(insert[i] || null);\r\n        });\r\n        const row = this.getRow(i + 1);\r\n        // eslint-disable-next-line prefer-spread\r\n        row.splice.apply(row, rowArguments);\r\n      }\r\n    } else {\r\n      // nothing to insert, so just splice all rows\r\n      this._rows.forEach(r => {\r\n        if (r) {\r\n          r.splice(start, count);\r\n        }\r\n      });\r\n    }\r\n\r\n    // splice column definitions\r\n    const nExpand = inserts.length - count;\r\n    const nKeep = start + count;\r\n    const nEnd = this._columns.length;\r\n    if (nExpand < 0) {\r\n      for (let i = start + inserts.length; i <= nEnd; i++) {\r\n        this.getColumn(i).defn = this.getColumn(i - nExpand).defn;\r\n      }\r\n    } else if (nExpand > 0) {\r\n      for (let i = nEnd; i >= nKeep; i--) {\r\n        this.getColumn(i + nExpand).defn = this.getColumn(i).defn;\r\n      }\r\n    }\r\n    for (let i = start; i < start + inserts.length; i++) {\r\n      this.getColumn(i).defn = null;\r\n    }\r\n\r\n    // account for defined names\r\n    this.workbook.definedNames.spliceColumns(this.name, start, count, inserts.length);\r\n  }\r\n\r\n  get columnCount() {\r\n    let maxCount = 0;\r\n    this.eachRow(row => {\r\n      maxCount = Math.max(maxCount, row.cellCount);\r\n    });\r\n    return maxCount;\r\n  }\r\n\r\n  get actualColumnCount() {\r\n    // performance nightmare - for each row, counts all the columns used\r\n    const counts = [];\r\n    let count = 0;\r\n    this.eachRow(row => {\r\n      row.eachCell(({col}) => {\r\n        if (!counts[col]) {\r\n          counts[col] = true;\r\n          count++;\r\n        }\r\n      });\r\n    });\r\n    return count;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Rows\r\n\r\n  _commitRow() {\r\n    // nop - allows streaming reader to fill a document\r\n  }\r\n\r\n  get _lastRowNumber() {\r\n    // need to cope with results of splice\r\n    const rows = this._rows;\r\n    let n = rows.length;\r\n    while (n > 0 && rows[n - 1] === undefined) {\r\n      n--;\r\n    }\r\n    return n;\r\n  }\r\n\r\n  get _nextRow() {\r\n    return this._lastRowNumber + 1;\r\n  }\r\n\r\n  get lastRow() {\r\n    if (this._rows.length) {\r\n      return this._rows[this._rows.length - 1];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // find a row (if exists) by row number\r\n  findRow(r) {\r\n    return this._rows[r - 1];\r\n  }\r\n\r\n  get rowCount() {\r\n    return this._lastRowNumber;\r\n  }\r\n\r\n  get actualRowCount() {\r\n    // counts actual rows that have actual data\r\n    let count = 0;\r\n    this.eachRow(() => {\r\n      count++;\r\n    });\r\n    return count;\r\n  }\r\n\r\n  // get a row by row number.\r\n  getRow(r) {\r\n    let row = this._rows[r - 1];\r\n    if (!row) {\r\n      row = this._rows[r - 1] = new Row(this, r);\r\n    }\r\n    return row;\r\n  }\r\n\r\n  addRow(value, styleOption = 'n') {\r\n    const rowNo = this._nextRow;\r\n    const row = this.getRow(rowNo);\r\n    row.values = value;\r\n    this._setStyleOption(rowNo, styleOption === 'i' ? styleOption : 'n');\r\n    return row;\r\n  }\r\n\r\n  addRows(value, styleOption = 'n') {\r\n    value.forEach(row => {\r\n      this.addRow(row, styleOption);\r\n    });\r\n  }\r\n\r\n  insertRow(pos, value, styleOption = 'n') {\r\n    this.spliceRows(pos, 0, value);\r\n    this._setStyleOption(pos, styleOption);\r\n    return this.getRow(pos);\r\n  }\r\n\r\n  insertRows(pos, values, styleOption = 'n') {\r\n    this.spliceRows(pos, 0, ...values);\r\n    if (styleOption !== 'n') {\r\n      // copy over the styles\r\n      for (let i = 0; i < values.length; i++) {\r\n        if (styleOption === 'o' && this.findRow(values.length + pos + i) !== undefined) {\r\n          this._copyStyle(values.length + pos + i, pos + i);\r\n        } else if (styleOption === 'i' && this.findRow(pos - 1) !== undefined) {\r\n          this._copyStyle(pos - 1, pos + i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // set row at position to same style as of either pervious row (option 'i') or next row (option 'o')\r\n  _setStyleOption(pos, styleOption = 'n') {\r\n    if (styleOption === 'o' && this.findRow(pos + 1) !== undefined) {\r\n      this._copyStyle(pos + 1, pos);\r\n    } else if (styleOption === 'i' && this.findRow(pos - 1) !== undefined) {\r\n      this._copyStyle(pos - 1, pos);\r\n    }\r\n  }\r\n\r\n  _copyStyle(src, dest) {\r\n    const rSrc = this.getRow(src);\r\n    const rDst = this.getRow(dest);\r\n    rDst.style = Object.freeze({...rSrc.style});\r\n    // eslint-disable-next-line no-loop-func\r\n    rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\r\n      rDst.getCell(colNumber).style = Object.freeze({...cell.style});\r\n    });\r\n    rDst.height = rSrc.height;\r\n  }\r\n\r\n  duplicateRow(rowNum, count, insert = false) {\r\n    // create count duplicates of rowNum\r\n    // either inserting new or overwriting existing rows\r\n\r\n    const rSrc = this._rows[rowNum - 1];\r\n    const inserts = new Array(count).fill(rSrc.values);\r\n    this.spliceRows(rowNum + 1, insert ? 0 : count, ...inserts);\r\n\r\n    // now copy styles...\r\n    for (let i = 0; i < count; i++) {\r\n      const rDst = this._rows[rowNum + i];\r\n      rDst.style = rSrc.style;\r\n      rDst.height = rSrc.height;\r\n      // eslint-disable-next-line no-loop-func\r\n      rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\r\n        rDst.getCell(colNumber).style = cell.style;\r\n      });\r\n    }\r\n  }\r\n\r\n  spliceRows(start, count, ...inserts) {\r\n    // same problem as row.splice, except worse.\r\n    const nKeep = start + count;\r\n    const nExpand = inserts.length - count;\r\n    const nEnd = this._rows.length;\r\n    let i;\r\n    let rSrc;\r\n    if (nExpand < 0) {\r\n      // remove rows\r\n      for (i = nKeep; i <= nEnd; i++) {\r\n        rSrc = this._rows[i - 1];\r\n        if (rSrc) {\r\n          const rDst = this.getRow(i + nExpand);\r\n          rDst.values = rSrc.values;\r\n          rDst.style = rSrc.style;\r\n          rDst.height = rSrc.height;\r\n          // eslint-disable-next-line no-loop-func\r\n          rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\r\n            rDst.getCell(colNumber).style = cell.style;\r\n          });\r\n          this._rows[i - 1] = undefined;\r\n        } else {\r\n          this._rows[i + nExpand - 1] = undefined;\r\n        }\r\n      }\r\n    } else if (nExpand > 0) {\r\n      // insert new cells\r\n      for (i = nEnd; i >= nKeep; i--) {\r\n        rSrc = this._rows[i - 1];\r\n        if (rSrc) {\r\n          const rDst = this.getRow(i + nExpand);\r\n          rDst.values = rSrc.values;\r\n          rDst.style = rSrc.style;\r\n          rDst.height = rSrc.height;\r\n          // eslint-disable-next-line no-loop-func\r\n          rSrc.eachCell({includeEmpty: true}, (cell, colNumber) => {\r\n            rDst.getCell(colNumber).style = cell.style;\r\n          });\r\n        } else {\r\n          this._rows[i + nExpand - 1] = undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    // now copy over the new values\r\n    for (i = 0; i < inserts.length; i++) {\r\n      const rDst = this.getRow(start + i);\r\n      rDst.style = {};\r\n      rDst.values = inserts[i];\r\n    }\r\n\r\n    // account for defined names\r\n    this.workbook.definedNames.spliceRows(this.name, start, count, inserts.length);\r\n  }\r\n\r\n  // iterate over every row in the worksheet, including maybe empty rows\r\n  eachRow(options, iteratee) {\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = undefined;\r\n    }\r\n    if (options && options.includeEmpty) {\r\n      const n = this._rows.length;\r\n      for (let i = 1; i <= n; i++) {\r\n        iteratee(this.getRow(i), i);\r\n      }\r\n    } else {\r\n      this._rows.forEach(row => {\r\n        if (row && row.hasValues) {\r\n          iteratee(row, row.number);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // return all rows as sparse array\r\n  getSheetValues() {\r\n    const rows = [];\r\n    this._rows.forEach(row => {\r\n      if (row) {\r\n        rows[row.number] = row.values;\r\n      }\r\n    });\r\n    return rows;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Cells\r\n\r\n  // returns the cell at [r,c] or address given by r. If not found, return undefined\r\n  findCell(r, c) {\r\n    const address = colCache.getAddress(r, c);\r\n    const row = this._rows[address.row - 1];\r\n    return row ? row.findCell(address.col) : undefined;\r\n  }\r\n\r\n  // return the cell at [r,c] or address given by r. If not found, create a new one.\r\n  getCell(r, c) {\r\n    const address = colCache.getAddress(r, c);\r\n    const row = this.getRow(address.row);\r\n    return row.getCellEx(address);\r\n  }\r\n\r\n  // =========================================================================\r\n  // Merge\r\n\r\n  // convert the range defined by ['tl:br'], [tl,br] or [t,l,b,r] into a single 'merged' cell\r\n  mergeCells(...cells) {\r\n    const dimensions = new Range(cells);\r\n    this._mergeCellsInternal(dimensions);\r\n  }\r\n\r\n  mergeCellsWithoutStyle(...cells) {\r\n    const dimensions = new Range(cells);\r\n    this._mergeCellsInternal(dimensions, true);\r\n  }\r\n\r\n  _mergeCellsInternal(dimensions, ignoreStyle) {\r\n    // check cells aren't already merged\r\n    _.each(this._merges, merge => {\r\n      if (merge.intersects(dimensions)) {\r\n        throw new Error('Cannot merge already merged cells');\r\n      }\r\n    });\r\n\r\n    // apply merge\r\n    const master = this.getCell(dimensions.top, dimensions.left);\r\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\r\n        // merge all but the master cell\r\n        if (i > dimensions.top || j > dimensions.left) {\r\n          this.getCell(i, j).merge(master, ignoreStyle);\r\n        }\r\n      }\r\n    }\r\n\r\n    // index merge\r\n    this._merges[master.address] = dimensions;\r\n  }\r\n\r\n  _unMergeMaster(master) {\r\n    // master is always top left of a rectangle\r\n    const merge = this._merges[master.address];\r\n    if (merge) {\r\n      for (let i = merge.top; i <= merge.bottom; i++) {\r\n        for (let j = merge.left; j <= merge.right; j++) {\r\n          this.getCell(i, j).unmerge();\r\n        }\r\n      }\r\n      delete this._merges[master.address];\r\n    }\r\n  }\r\n\r\n  get hasMerges() {\r\n    // return true if this._merges has a merge object\r\n    return _.some(this._merges, Boolean);\r\n  }\r\n\r\n  // scan the range defined by ['tl:br'], [tl,br] or [t,l,b,r] and if any cell is part of a merge,\r\n  // un-merge the group. Note this function can affect multiple merges and merge-blocks are\r\n  // atomic - either they're all merged or all un-merged.\r\n  unMergeCells(...cells) {\r\n    const dimensions = new Range(cells);\r\n\r\n    // find any cells in that range and unmerge them\r\n    for (let i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (let j = dimensions.left; j <= dimensions.right; j++) {\r\n        const cell = this.findCell(i, j);\r\n        if (cell) {\r\n          if (cell.type === Enums.ValueType.Merge) {\r\n            // this cell merges to another master\r\n            this._unMergeMaster(cell.master);\r\n          } else if (this._merges[cell.address]) {\r\n            // this cell is a master\r\n            this._unMergeMaster(cell);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Shared/Array Formula\r\n  fillFormula(range, formula, results, shareType = 'shared') {\r\n    // Define formula for top-left cell and share to rest\r\n    const decoded = colCache.decode(range);\r\n    const {top, left, bottom, right} = decoded;\r\n    const width = right - left + 1;\r\n    const masterAddress = colCache.encodeAddress(top, left);\r\n    const isShared = shareType === 'shared';\r\n\r\n    // work out result accessor\r\n    let getResult;\r\n    if (typeof results === 'function') {\r\n      getResult = results;\r\n    } else if (Array.isArray(results)) {\r\n      if (Array.isArray(results[0])) {\r\n        getResult = (row, col) => results[row - top][col - left];\r\n      } else {\r\n        // eslint-disable-next-line no-mixed-operators\r\n        getResult = (row, col) => results[(row - top) * width + (col - left)];\r\n      }\r\n    } else {\r\n      getResult = () => undefined;\r\n    }\r\n    let first = true;\r\n    for (let r = top; r <= bottom; r++) {\r\n      for (let c = left; c <= right; c++) {\r\n        if (first) {\r\n          this.getCell(r, c).value = {\r\n            shareType,\r\n            formula,\r\n            ref: range,\r\n            result: getResult(r, c),\r\n          };\r\n          first = false;\r\n        } else {\r\n          this.getCell(r, c).value = isShared\r\n            ? {\r\n                sharedFormula: masterAddress,\r\n                result: getResult(r, c),\r\n              }\r\n            : getResult(r, c);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // =========================================================================\r\n  // Images\r\n  addImage(imageId, range) {\r\n    const model = {\r\n      type: 'image',\r\n      imageId,\r\n      range,\r\n    };\r\n    this._media.push(new Image(this, model));\r\n  }\r\n\r\n  getImages() {\r\n    return this._media.filter(m => m.type === 'image');\r\n  }\r\n\r\n  addBackgroundImage(imageId) {\r\n    const model = {\r\n      type: 'background',\r\n      imageId,\r\n    };\r\n    this._media.push(new Image(this, model));\r\n  }\r\n\r\n  getBackgroundImageId() {\r\n    const image = this._media.find(m => m.type === 'background');\r\n    return image && image.imageId;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Worksheet Protection\r\n  protect(password, options) {\r\n    // TODO: make this function truly async\r\n    // perhaps marshal to worker thread or something\r\n    return new Promise(resolve => {\r\n      this.sheetProtection = {\r\n        sheet: true,\r\n      };\r\n      if (options && 'spinCount' in options) {\r\n        // force spinCount to be integer >= 0\r\n        options.spinCount = Number.isFinite(options.spinCount) ? Math.round(Math.max(0, options.spinCount)) : 100000;\r\n      }\r\n      if (password) {\r\n        this.sheetProtection.algorithmName = 'SHA-512';\r\n        this.sheetProtection.saltValue = Encryptor.randomBytes(16).toString('base64');\r\n        this.sheetProtection.spinCount = options && 'spinCount' in options ? options.spinCount : 100000; // allow user specified spinCount\r\n        this.sheetProtection.hashValue = Encryptor.convertPasswordToHash(password, 'SHA512', this.sheetProtection.saltValue, this.sheetProtection.spinCount);\r\n      }\r\n      if (options) {\r\n        this.sheetProtection = Object.assign(this.sheetProtection, options);\r\n        if (!password && 'spinCount' in options) {\r\n          delete this.sheetProtection.spinCount;\r\n        }\r\n      }\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  unprotect() {\r\n    this.sheetProtection = null;\r\n  }\r\n\r\n  // =========================================================================\r\n  // Tables\r\n  addTable(model) {\r\n    const table = new Table(this, model);\r\n    this.tables[model.name] = table;\r\n    return table;\r\n  }\r\n\r\n  getTable(name) {\r\n    return this.tables[name];\r\n  }\r\n\r\n  removeTable(name) {\r\n    delete this.tables[name];\r\n  }\r\n\r\n  getTables() {\r\n    return Object.values(this.tables);\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Conditional Formatting\r\n  addConditionalFormatting(cf) {\r\n    this.conditionalFormattings.push(cf);\r\n  }\r\n\r\n  removeConditionalFormatting(filter) {\r\n    if (typeof filter === 'number') {\r\n      this.conditionalFormattings.splice(filter, 1);\r\n    } else if (filter instanceof Function) {\r\n      this.conditionalFormattings = this.conditionalFormattings.filter(filter);\r\n    } else {\r\n      this.conditionalFormattings = [];\r\n    }\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Deprecated\r\n  get tabColor() {\r\n    // eslint-disable-next-line no-console\r\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\r\n    return this.properties.tabColor;\r\n  }\r\n\r\n  set tabColor(value) {\r\n    // eslint-disable-next-line no-console\r\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\r\n    this.properties.tabColor = value;\r\n  }\r\n\r\n  // ===========================================================================\r\n  // Model\r\n\r\n  get model() {\r\n    const model = {\r\n      id: this.id,\r\n      name: this.name,\r\n      dataValidations: this.dataValidations.model,\r\n      properties: this.properties,\r\n      state: this.state,\r\n      pageSetup: this.pageSetup,\r\n      headerFooter: this.headerFooter,\r\n      rowBreaks: this.rowBreaks,\r\n      views: this.views,\r\n      autoFilter: this.autoFilter,\r\n      media: this._media.map(medium => medium.model),\r\n      sheetProtection: this.sheetProtection,\r\n      tables: Object.values(this.tables).map(table => table.model),\r\n      conditionalFormattings: this.conditionalFormattings,\r\n    };\r\n\r\n    // =================================================\r\n    // columns\r\n    model.cols = Column.toModel(this.columns);\r\n\r\n    // ==========================================================\r\n    // Rows\r\n    const rows = (model.rows = []);\r\n    const dimensions = (model.dimensions = new Range());\r\n    this._rows.forEach(row => {\r\n      const rowModel = row && row.model;\r\n      if (rowModel) {\r\n        dimensions.expand(rowModel.number, rowModel.min, rowModel.number, rowModel.max);\r\n        rows.push(rowModel);\r\n      }\r\n    });\r\n\r\n    // ==========================================================\r\n    // Merges\r\n    model.merges = [];\r\n    _.each(this._merges, merge => {\r\n      model.merges.push(merge.range);\r\n    });\r\n\r\n    return model;\r\n  }\r\n\r\n  _parseRows(model) {\r\n    this._rows = [];\r\n    model.rows.forEach(rowModel => {\r\n      const row = new Row(this, rowModel.number);\r\n      this._rows[row.number - 1] = row;\r\n      row.model = rowModel;\r\n    });\r\n  }\r\n\r\n  _parseMergeCells(model) {\r\n    _.each(model.mergeCells, merge => {\r\n      // Do not merge styles when importing an Excel file\r\n      // since each cell may have different styles intentionally.\r\n      this.mergeCellsWithoutStyle(merge);\r\n    });\r\n  }\r\n\r\n  set model(value) {\r\n    this.name = value.name;\r\n    this._columns = Column.fromModel(this, value.cols);\r\n    this._parseRows(value);\r\n\r\n    this._parseMergeCells(value);\r\n    this.dataValidations = new DataValidations(value.dataValidations);\r\n    this.properties = value.properties;\r\n    this.pageSetup = value.pageSetup;\r\n    this.headerFooter = value.headerFooter;\r\n    this.views = value.views;\r\n    this.autoFilter = value.autoFilter;\r\n    this._media = value.media.map(medium => new Image(this, medium));\r\n    this.sheetProtection = value.sheetProtection;\r\n    this.tables = value.tables.reduce((tables, table) => {\r\n      const t = new Table();\r\n      t.model = table;\r\n      tables[table.name] = t;\r\n      return tables;\r\n    }, {});\r\n    this.conditionalFormattings = value.conditionalFormattings;\r\n  }\r\n}\r\n\r\nmodule.exports = Worksheet;\r\n"],"file":"worksheet.js"}