{"version":3,"sources":["../../../lib/utils/zip-stream.js"],"names":["events","require","JSZip","StreamBuf","ZipWriter","options","Object","assign","type","compression","zip","stream","data","hasOwnProperty","base64","file","name","generateAsync","content","end","emit","size","read","encoding","setEncoding","pause","resume","isPaused","destination","pipe","unpipe","chunk","unshift","wrap","EventEmitter","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB,C,CAEA;AACA;AACA;;;IACMG,S;;;;;AACJ,qBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB;AACA,UAAKA,OAAL,GAAeC,MAAM,CAACC,MAAP,CACb;AACEC,MAAAA,IAAI,EAAE,YADR;AAEEC,MAAAA,WAAW,EAAE;AAFf,KADa,EAKbJ,OALa,CAAf;AAQA,UAAKK,GAAL,GAAW,IAAIR,KAAJ,EAAX;AACA,UAAKS,MAAL,GAAc,IAAIR,SAAJ,EAAd;AAXmB;AAYpB;;;;2BAEMS,I,EAAMP,O,EAAS;AACpB,UAAIA,OAAO,CAACQ,cAAR,CAAuB,QAAvB,KAAoCR,OAAO,CAACS,MAAhD,EAAwD;AACtD,aAAKJ,GAAL,CAASK,IAAT,CAAcV,OAAO,CAACW,IAAtB,EAA4BJ,IAA5B,EAAkC;AAACE,UAAAA,MAAM,EAAE;AAAT,SAAlC;AACD,OAFD,MAEO;AACL,aAAKJ,GAAL,CAASK,IAAT,CAAcV,OAAO,CAACW,IAAtB,EAA4BJ,IAA5B;AACD;AACF;;;;;;;;;;;uBAGuB,KAAKF,GAAL,CAASO,aAAT,CAAuB,KAAKZ,OAA5B,C;;;AAAhBa,gBAAAA,O;AACN,qBAAKP,MAAL,CAAYQ,GAAZ,CAAgBD,OAAhB;AACA,qBAAKE,IAAL,CAAU,QAAV;;;;;;;;;;;;;;;QAGF;AACA;;;;yBACKC,I,EAAM;AACT,aAAO,KAAKV,MAAL,CAAYW,IAAZ,CAAiBD,IAAjB,CAAP;AACD;;;gCAEWE,Q,EAAU;AACpB,aAAO,KAAKZ,MAAL,CAAYa,WAAZ,CAAwBD,QAAxB,CAAP;AACD;;;4BAEO;AACN,aAAO,KAAKZ,MAAL,CAAYc,KAAZ,EAAP;AACD;;;6BAEQ;AACP,aAAO,KAAKd,MAAL,CAAYe,MAAZ,EAAP;AACD;;;+BAEU;AACT,aAAO,KAAKf,MAAL,CAAYgB,QAAZ,EAAP;AACD;;;yBAEIC,W,EAAavB,O,EAAS;AACzB,aAAO,KAAKM,MAAL,CAAYkB,IAAZ,CAAiBD,WAAjB,EAA8BvB,OAA9B,CAAP;AACD;;;2BAEMuB,W,EAAa;AAClB,aAAO,KAAKjB,MAAL,CAAYmB,MAAZ,CAAmBF,WAAnB,CAAP;AACD;;;4BAEOG,K,EAAO;AACb,aAAO,KAAKpB,MAAL,CAAYqB,OAAZ,CAAoBD,KAApB,CAAP;AACD;;;yBAEIpB,M,EAAQ;AACX,aAAO,KAAKA,MAAL,CAAYsB,IAAZ,CAAiBtB,MAAjB,CAAP;AACD;;;;EAjEqBX,MAAM,CAACkC,Y,GAoE/B;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfhC,EAAAA,SAAS,EAATA;AADe,CAAjB","sourcesContent":["const events = require('events');\r\nconst JSZip = require('jszip');\r\n\r\nconst StreamBuf = require('./stream-buf');\r\n\r\n// =============================================================================\r\n// The ZipWriter class\r\n// Packs streamed data into an output zip stream\r\nclass ZipWriter extends events.EventEmitter {\r\n  constructor(options) {\r\n    super();\r\n    this.options = Object.assign(\r\n      {\r\n        type: 'nodebuffer',\r\n        compression: 'DEFLATE',\r\n      },\r\n      options\r\n    );\r\n\r\n    this.zip = new JSZip();\r\n    this.stream = new StreamBuf();\r\n  }\r\n\r\n  append(data, options) {\r\n    if (options.hasOwnProperty('base64') && options.base64) {\r\n      this.zip.file(options.name, data, {base64: true});\r\n    } else {\r\n      this.zip.file(options.name, data);\r\n    }\r\n  }\r\n\r\n  async finalize() {\r\n    const content = await this.zip.generateAsync(this.options);\r\n    this.stream.end(content);\r\n    this.emit('finish');\r\n  }\r\n\r\n  // ==========================================================================\r\n  // Stream.Readable interface\r\n  read(size) {\r\n    return this.stream.read(size);\r\n  }\r\n\r\n  setEncoding(encoding) {\r\n    return this.stream.setEncoding(encoding);\r\n  }\r\n\r\n  pause() {\r\n    return this.stream.pause();\r\n  }\r\n\r\n  resume() {\r\n    return this.stream.resume();\r\n  }\r\n\r\n  isPaused() {\r\n    return this.stream.isPaused();\r\n  }\r\n\r\n  pipe(destination, options) {\r\n    return this.stream.pipe(destination, options);\r\n  }\r\n\r\n  unpipe(destination) {\r\n    return this.stream.unpipe(destination);\r\n  }\r\n\r\n  unshift(chunk) {\r\n    return this.stream.unshift(chunk);\r\n  }\r\n\r\n  wrap(stream) {\r\n    return this.stream.wrap(stream);\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n\r\nmodule.exports = {\r\n  ZipWriter,\r\n};\r\n"],"file":"zip-stream.js"}